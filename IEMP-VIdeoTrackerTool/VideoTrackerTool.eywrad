<?xml version="1.0" encoding="UTF-8"?>

<EywRADproject version="3">
  <Properties dialog_colour="fff0ffff" dialog_caption="Video Tracker Tool"
              dialog_rect="0 0 1080 866" save_dialog_pos="0" tab_orientation="0"
              hide_tab_on_single_sheet="1" toolbar_visible="0" conn_btns_visible="1"
              ctrl_btns_visible="1" time_code_visible="1" autoconnect="1" autostart="1"
              autostop="1" always_create_new_patch="0" connection_timeout="10"
              log_btn_visible="0" tooltips_enabled="1" tooltip_bgnd_colour="ffeeeebb"
              tooltip_text_colour="ff000000" tooltip_outline_colour="4c000000"/>
  <ConnectionParams host="localhost" port="7834"/>
  <DataLoggingParams file_logging_enabled="0" log_filename="" truncate_log_file="0"
                     database_logging_enabled="0" log_databasename="mobius_db" log_database_user_id=""
                     log_database_password="" log_tablename="mobius_log" create_log_table="1"
                     truncate_log_table="1"/>
  <Menu visible="0">
    <MenuItem type="1000" label="">
      <MenuItems/>
    </MenuItem>
  </Menu>
  <Sheets>
    <Sheet title="Video Tracker Tool" bgnd_colour="ffa7b2b2" SheetPatch="VideoTrackerTool">
      <SheetItems>
        <SheetItem type="1001" tooltip_text="" rectangle="-104 -176 497 153" border_colour="ff461e1e"
                   fill_colour="ffda8c7c" border_thickness="1" corner_size="0">
          <EywItemBindenabled patch="VideoTrackerTool" label="CompareFinal" id="output"/>
          <EywItemBindvisible patch="" label="" id="True"/>
        </SheetItem>
        <SheetItem type="2002" tooltip_text="" rectangle="24 448 241 25" caption="Start"
                   colour="ff35dc2f" text_on_colour="ff000000" text_off_colour="ff000000"
                   conn_left="0" conn_right="0" conn_top="0" conn_bottom="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="VideoTrackerTool" label="*LoadConfig" id="output"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="BangGenerator_8" id="bang"/>
          <Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
          <Tooltip></Tooltip>
        </SheetItem>
        <SheetItem type="3000" tooltip_text="" rectangle="616 216 69 49" bgnd_colour="ffffff"
                   outline_colour="0" text_colour="ff000000" multiline="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="_TrialActualNumber"
                       id="output"/>
          <Font name="Arial" size="30" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="656 216 57 41" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>/<Font name="Bell MT" size="87" style="0"/>
        </SheetItem>
        <SheetItem type="1001" tooltip_text="" rectangle="32 8 489 153" border_colour="ff461e1e"
                   fill_colour="ff69a4da" border_thickness="1" corner_size="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
        </SheetItem>
        <SheetItem type="1000" tooltip_text="" start_point_x="16" start_point_y="168"
                   end_point_x="1046" end_point_y="168" colour="ff000000" thickness="1">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
        </SheetItem>
        <SheetItem type="3000" tooltip_text="" rectangle="560 128 457 25" bgnd_colour="ffffffff"
                   outline_colour="0" text_colour="ff000000" multiline="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="_fileKCF" id="output"/>
          <Font name="Arial" size="12" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="56 88 193 33" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>Set the output folder<Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="552 104 153 25" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>KCF Tracker result file:<Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="552 160 257 57" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>Processed Videos:<Font name="Arial" size="24" style="0"/>
        </SheetItem>
        <SheetItem type="3000" tooltip_text="" rectangle="712 216 69 49" bgnd_colour="ffffff"
                   outline_colour="0" text_colour="ff000000" multiline="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="_TrialTotalNumber" id="output"/>
          <Font name="Arial" size="30" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="552 56 153 25" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>Optical Flow result file:<Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
        </SheetItem>
        <SheetItem type="3000" tooltip_text="" rectangle="560 80 457 25" bgnd_colour="ffffffff"
                   outline_colour="0" text_colour="ff000000" multiline="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="_fileOF" id="output"/>
          <Font name="Arial" size="12" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="544 8 209 25" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>Frame Differencing result file:<Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
        </SheetItem>
        <SheetItem type="3000" tooltip_text="" rectangle="560 32 465 25" bgnd_colour="ffffffff"
                   outline_colour="0" text_colour="ff000000" multiline="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="_fileFD" id="output"/>
          <Font name="Arial" size="12" style="0"/>
        </SheetItem>
        <SheetItem type="3000" tooltip_text="" rectangle="144 176 385 33" bgnd_colour="ffffffff"
                   outline_colour="0" text_colour="ff000000" multiline="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="FileStem" id="output"/>
          <Font name="Arial" size="19.600000381469727" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="16 168 121 49" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>Current Video:<Font name="Arial" size="20.799999237060547" style="0"/>
        </SheetItem>
        <SheetItem type="1000" tooltip_text="" start_point_x="24" start_point_y="272"
                   end_point_x="1058" end_point_y="272" colour="ff000000" thickness="1">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
        </SheetItem>
        <SheetItem type="2002" tooltip_text="" rectangle="336 32 153 73" caption="Load Config"
                   colour="ffeeeeff" text_on_colour="ff000000" text_off_colour="ff000000"
                   conn_left="0" conn_right="0" conn_top="0" conn_bottom="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="VideoTrackerTool" label="*LoadConfigVisible" id="output"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="BangGenerator_1" id="bang"/>
          <Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
          <Tooltip></Tooltip>
        </SheetItem>
        <SheetItem type="1001" tooltip_text="" rectangle="48 16 250 33" border_colour="ff000000"
                   fill_colour="ffffff" border_thickness="1" corner_size="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
        </SheetItem>
        <SheetItem type="3000" tooltip_text="" rectangle="48 56 249 25" bgnd_colour="ffffffff"
                   outline_colour="0" text_colour="ff000000" multiline="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="_RoiFile" id="output"/>
          <Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
        </SheetItem>
        <SheetItem type="3000" tooltip_text="" rectangle="336 112 153 25" bgnd_colour="15ffffff"
                   outline_colour="0" text_colour="ff000000" multiline="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="_FeedBack" id="output"/>
          <Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
        </SheetItem>
        <SheetItem type="2004" tooltip_text="" rectangle="248 16 49 33" is_directory="0"
                   wildcard="*" filename_editable="1">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="_RoiFile" id="value"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="32 280 121 49" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>Frame Differencing<Font name="Arial" size="20.799999237060547" style="0"/>
        </SheetItem>
        <SheetItem type="2007" tooltip_text="" rectangle="336 280 177 49" true_caption="Active"
                   false_caption="Not Active" true_colour="ff47c63d" false_colour="ffff3600"
                   text_on_colour="ff000000" text_off_colour="ff000000" conn_left="0"
                   conn_right="0" conn_top="0" conn_bottom="0">
          <EywItemBindenabled patch="" label="" id="False"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="ConstantGenerator - int_3"
                       id="value"/>
          <Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
          <Tooltip></Tooltip>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="32 336 121 49" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>Optical Flow<Font name="Arial" size="20.799999237060547" style="0"/>
        </SheetItem>
        <SheetItem type="2007" tooltip_text="" rectangle="336 336 177 49" true_caption="Active"
                   false_caption="Not Active" true_colour="ff47c63d" false_colour="ffff3600"
                   text_on_colour="ff000000" text_off_colour="ff000000" conn_left="0"
                   conn_right="0" conn_top="0" conn_bottom="0">
          <EywItemBindenabled patch="" label="" id="False"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="ConstantGenerator - int_4"
                       id="value"/>
          <Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
          <Tooltip></Tooltip>
        </SheetItem>
        <SheetItem type="2007" tooltip_text="" rectangle="336 392 177 49" true_caption="Active"
                   false_caption="Not Active" true_colour="ff47c63d" false_colour="ffff3600"
                   text_on_colour="ff000000" text_off_colour="ff000000" conn_left="0"
                   conn_right="0" conn_top="0" conn_bottom="0">
          <EywItemBindenabled patch="" label="" id="False"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="ConstantGenerator - int_5"
                       id="value"/>
          <Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
          <Tooltip></Tooltip>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="32 392 121 49" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>KCF Tracker<Font name="Arial" size="20.799999237060547" style="0"/>
        </SheetItem>
        <SheetItem type="2002" tooltip_text="" rectangle="24 480 489 25" caption="Skip To Next Video &gt;&gt;"
                   colour="ffbedc2f" text_on_colour="ff000000" text_off_colour="ff000000"
                   conn_left="0" conn_right="0" conn_top="0" conn_bottom="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="VideoTrackerTool" label="*StartIsPressed" id="output"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="BangGenerator_3" id="bang"/>
          <Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
          <Tooltip></Tooltip>
        </SheetItem>
        <SheetItem type="3003" tooltip_text="" rectangle="544 312 241 193">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="*FD1" id="output_video_stream"/>
        </SheetItem>
        <SheetItem type="3003" tooltip_text="" rectangle="808 312 241 193">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="*FD2" id="output_video_stream"/>
        </SheetItem>
        <SheetItem type="3003" tooltip_text="" rectangle="280 544 241 193">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="*KCF2" id="Output"/>
        </SheetItem>
        <SheetItem type="3003" tooltip_text="" rectangle="544 544 241 193">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="*OF1" id="Output"/>
        </SheetItem>
        <SheetItem type="3003" tooltip_text="" rectangle="808 544 241 193">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="*OF2" id="Output"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="664 280 249 27" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>Frame Differencing<Font name="Arial" size="20.799999237060547" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="672 512 249 27" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>Optical Flow<Font name="Arial" size="20.799999237060547" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="136 512 249 27" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>KCF Tracker<Font name="Arial" size="20.799999237060547" style="0"/>
        </SheetItem>
        <SheetItem type="3003" tooltip_text="" rectangle="16 544 241 193">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="*KCF1" id="Output"/>
        </SheetItem>
        <SheetItem type="1000" tooltip_text="" start_point_x="528" start_point_y="512"
                   end_point_x="1066" end_point_y="512" colour="ff000000" thickness="1">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
        </SheetItem>
        <SheetItem type="2002" tooltip_text="" rectangle="160 280 169 49" caption="ON / OFF"
                   colour="ffeeeeff" text_on_colour="ff000000" text_off_colour="ff000000"
                   conn_left="0" conn_right="0" conn_top="0" conn_bottom="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="BangGenerator_9" id="bang"/>
          <Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
          <Tooltip></Tooltip>
        </SheetItem>
        <SheetItem type="2002" tooltip_text="" rectangle="160 336 169 49" caption="ON / OFF"
                   colour="ffeeeeff" text_on_colour="ff000000" text_off_colour="ff000000"
                   conn_left="0" conn_right="0" conn_top="0" conn_bottom="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="BangGenerator_10" id="bang"/>
          <Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
          <Tooltip></Tooltip>
        </SheetItem>
        <SheetItem type="2002" tooltip_text="" rectangle="160 392 169 49" caption="ON / OFF"
                   colour="ffeeeeff" text_on_colour="ff000000" text_off_colour="ff000000"
                   conn_left="0" conn_right="0" conn_top="0" conn_bottom="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="BangGenerator_11" id="bang"/>
          <Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
          <Tooltip></Tooltip>
        </SheetItem>
        <SheetItem type="1000" tooltip_text="" start_point_x="536" start_point_y="512"
                   end_point_x="16" end_point_y="512" colour="ff000000" thickness="1">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
        </SheetItem>
        <SheetItem type="2002" tooltip_text="" rectangle="16 752 504 33" caption="End Session"
                   colour="ffcf3d25" text_on_colour="ff000000" text_off_colour="ff000000"
                   conn_left="0" conn_right="0" conn_top="0" conn_bottom="0">
          <EywItemBindenabled patch="VideoTrackerTool" label="CompareWithValue - int_3" id="output"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="SetToNull" id="bang"/>
          <Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
          <Tooltip></Tooltip>
        </SheetItem>
        <SheetItem type="2002" tooltip_text="" rectangle="528 752 521 33" caption="Close Tool"
                   colour="ffcf3d25" text_on_colour="ff000000" text_off_colour="ff000000"
                   conn_left="0" conn_right="0" conn_top="0" conn_bottom="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="Close Gui" id="bang"/>
          <Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
          <Tooltip></Tooltip>
        </SheetItem>
        <SheetItem type="1000" tooltip_text="" start_point_x="544" start_point_y="184"
                   end_point_x="544" end_point_y="224" colour="ff000000" thickness="1">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
        </SheetItem>
        <SheetItem type="2002" tooltip_text="" rectangle="272 448 241 25" caption="Restart"
                   colour="ff35dc2f" text_on_colour="ff000000" text_off_colour="ff000000"
                   conn_left="0" conn_right="0" conn_top="0" conn_bottom="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="VideoTrackerTool" label="*StartIsPressed" id="output"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="Restart" id="bang"/>
          <Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
          <Tooltip></Tooltip>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="16 216 121 49" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>Comment:<Font name="Arial" size="20.799999237060547" style="0"/>
        </SheetItem>
        <SheetItem type="3000" tooltip_text="" rectangle="144 224 385 33" bgnd_colour="ffffffff"
                   outline_colour="0" text_colour="ff000000" multiline="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="*Comment" id="output"/>
          <Font name="Arial" size="19.799999237060547" style="0"/>
        </SheetItem>
        <SheetItem type="1000" tooltip_text="" start_point_x="544" start_point_y="224"
                   end_point_x="544" end_point_y="266" colour="ff000000" thickness="1">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="856 160 153 57" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>Frame Interval:<Font name="Arial" size="24" style="0"/>
        </SheetItem>
        <SheetItem type="1000" tooltip_text="" start_point_x="816" start_point_y="176"
                   end_point_x="816" end_point_y="221" colour="ff000000" thickness="1">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
        </SheetItem>
        <SheetItem type="1000" tooltip_text="" start_point_x="816" start_point_y="216"
                   end_point_x="816" end_point_y="263" colour="ff000000" thickness="1">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
        </SheetItem>
        <SheetItem type="1000" tooltip_text="" start_point_x="1048" start_point_y="176"
                   end_point_x="1048" end_point_y="221" colour="ff000000" thickness="1">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
        </SheetItem>
        <SheetItem type="1000" tooltip_text="" start_point_x="1048" start_point_y="216"
                   end_point_x="1048" end_point_y="263" colour="ff000000" thickness="1">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
        </SheetItem>
        <SheetItem type="3000" tooltip_text="" rectangle="864 216 69 49" bgnd_colour="ffffff"
                   outline_colour="0" text_colour="ff000000" multiline="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="*FrameInitString" id="output"/>
          <Font name="Arial" size="30" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="920 216 57 41" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>/<Font name="Bell MT" size="87" style="0"/>
        </SheetItem>
        <SheetItem type="3000" tooltip_text="" rectangle="960 216 69 49" bgnd_colour="ffffff"
                   outline_colour="0" text_colour="ff000000" multiline="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="ConstantGenerator - int_10"
                       id="output"/>
          <Font name="Arial" size="30" style="0"/>
        </SheetItem>
        <SheetItem type="3000" tooltip_text="" rectangle="48 128 249 25" bgnd_colour="ffffffff"
                   outline_colour="0" text_colour="ff000000" multiline="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="_ResultFolder" id="output"/>
          <Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
        </SheetItem>
        <SheetItem type="1001" tooltip_text="" rectangle="48 88 249 33" border_colour="ff000000"
                   fill_colour="ffffff" border_thickness="1" corner_size="0">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
        </SheetItem>
        <SheetItem type="2004" tooltip_text="" rectangle="248 88 49 33" is_directory="1"
                   wildcard="*" filename_editable="1">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="_ResultFolder" id="value"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="56 16 194 28" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>Select the ROI file<Font name="&lt;Sans-Serif&gt;" size="14" style="0"/>
        </SheetItem>
      </SheetItems>
      <ConnectionParams host="localhost" port="7834"/>
      <PatchOutline imported_patch="VideoTrackerTool">
        <Blocks>
          <Block label="DisplayGDI-Interact_1" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_1" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_12" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConcatenateStrings_2" catalog="base" class_id="concatenate_strings">
            <Parameters/>
            <Outputs>
              <Output id="output" name="Output string" descr="The concatenation of the input strings">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_3" name="Input string 3" descr="The input string 3 wil be placed at position 3 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_4" name="Input string 4" descr="The input string 4 wil be placed at position 4 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_5" name="Input string 5" descr="The input string 5 wil be placed at position 5 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_3" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConcatenateStrings_3" catalog="base" class_id="concatenate_strings">
            <Parameters/>
            <Outputs>
              <Output id="output" name="Output string" descr="The concatenation of the input strings">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="_ResultFolder" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_RoiFile" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_1" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringDisplay_2" catalog="system" class_id="string_display">
            <Parameters>
              <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Near (left);Center</Label>
                  <Label>Far (right)</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="string" name="Input string" descr="Input string to display.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_1" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="1">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="1">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_1" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_1" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*FD1" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_5" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_3" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_5" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_2" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - int_3" catalog="kernel" class_id="scalar_arith_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OutputSelector_1" catalog="kernel" class_id="output_selector">
            <Parameters>
              <Parameter id="active_output" name="Active output" descr="Zero-based index of the active output. The selected output is activated."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_1" name="Output 1" descr="0 output of the block.">
                <Datatype type="0"/>
              </Output>
              <Output id="output_2" name="Output 2" descr="1 output of the block.">
                <Datatype type="0"/>
              </Output>
              <Output id="output_3" name="Output 3" descr="2 output of the block.">
                <Datatype type="0"/>
              </Output>
              <Output id="output_4" name="Output 4" descr="3 output of the block.">
                <Datatype type="0"/>
              </Output>
              <Output id="output_5" name="Output 5" descr="4 output of the block.">
                <Datatype type="0"/>
              </Output>
              <Output id="output_6" name="Output 6" descr="5 output of the block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input of the selector. The input is propagated to the choosen output.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_2" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_7" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_8" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_9" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_2" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_3" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_4" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_5" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_2" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_2" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="1">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="1">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_2" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_2" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*FD2" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_2" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_4" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_3" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_3" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_3" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageMedianFilter_3" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_3" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_5" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_4" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_4" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_4" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageMedianFilter_4" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_4" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_6" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_5" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_5" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_5" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageMedianFilter_5" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_6" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_7" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_6" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_6" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_6" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageMedianFilter_6" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_7" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_2" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_3" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_5" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_4" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_6" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_7" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_8" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_3" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_9" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_4" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_10" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_5" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_11" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_6" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_12" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_7" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_13" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_7" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarDisplay_9" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_10" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_12" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_13" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_1" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringDisplay_7" catalog="system" class_id="string_display">
            <Parameters>
              <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Near (left);Center</Label>
                  <Label>Far (right)</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="string" name="Input string" descr="Input string to display.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_2" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_14" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_15" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_16" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_17" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_18" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_19" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_4" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_5" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_6" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_13" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_14" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_15" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_16" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_17" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_18" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_2" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_5" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="StringToInt_2" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_3" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_4" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_5" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_6" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_7" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_8" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_9" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_10" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_3" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_4" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_6" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_6" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_22" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_65" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_23" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_24" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_66" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_25" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_67" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_26" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_27" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_68" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_85" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_77" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_86" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_87" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_78" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_79" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_7" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_8" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_9" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_10" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_11" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_12" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_11" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_12" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_13" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_14" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_15" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_16" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_4" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_2" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_5" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_3" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_19" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_17" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_20" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_21" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_18" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_28" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_29" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_19" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_20" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_30" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_31" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_21" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_22" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_7" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_7" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_32" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_23" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_33" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_24" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_34" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_35" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_36" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_37" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_38" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_39" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_25" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_26" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_27" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_28" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_29" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_30" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_8" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_8" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_9" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_9" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_40" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_31" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_41" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_42" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_32" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_43" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_44" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_33" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_34" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_45" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_46" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_35" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_36" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_10" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_10" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_47" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_37" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_48" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_38" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_49" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_50" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_39" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_40" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_11" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_11" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_51" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_41" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_52" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_42" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_53" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_54" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_55" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_56" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_57" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_58" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_43" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_44" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_45" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_46" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_47" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_48" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_12" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_12" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_13" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_13" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_59" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_49" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_60" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_61" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_50" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_62" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_63" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_51" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_52" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_64" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_65" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_53" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_54" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_14" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_14" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_66" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_55" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_67" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_56" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_68" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_69" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_57" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_58" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_15" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_15" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_70" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_59" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_71" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_60" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_72" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_73" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_61" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_62" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_16" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_16" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_74" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_63" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_75" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_64" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_76" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_77" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_78" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_79" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_80" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_81" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_69" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_70" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_71" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_72" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_73" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_74" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_17" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_17" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_18" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_18" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_82" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_75" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_83" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_84" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_76" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_88" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_89" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_80" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_81" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_90" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_91" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_82" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_83" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_19" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_19" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_92" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_84" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_93" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_85" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_94" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_95" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_86" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_87" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_20" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_20" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_96" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_88" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_97" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_89" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_98" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_99" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_90" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_91" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_21" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_21" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_100" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_92" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_101" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_93" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_102" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_103" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_94" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_95" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_22" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_22" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_104" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_96" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_105" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_97" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_1" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ComputeFPS_1" catalog="base" class_id="compute_fps">
            <Parameters>
              <Parameter id="selector" name="Selector" descr="Each datatype has more than one timestamp attached to itself. This parameter specifies which one to use when computing FPS"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Creation Time;Presentation Time</Label>
                  <Label>Media Time</Label>
                </Layout>
              </Parameter>
              <Parameter id="window_size" name="Window size" descr="To obtain a reliable measure, an average is performed on the last measured samples. This parameter specifies the size of the window. A size of one means that no average is performed."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="rese" name="Reset" descr="Reset the current window storing the last 'window size' timestamps"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="FPS" descr="Computed Frames Per Second">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input datatype whom framerate is going to be computed">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MediafileReader_1" catalog="base" class_id="media_file_reader_new">
            <Parameters>
              <Parameter id="media_filename" name="Filename" descr="Filepath of media file. An empty filename is allowed; the corresponding video output is black, the corresponding audio output is silence"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="out_of_bound_management" name="End of file mode" descr="Describes the behaviour of the reader when an end of file is reached:&#13;&#10; - Loop: playback restart from the beginning of the file&#13;&#10; - Keep last frame: the last frame is repeaed indefinitely&#13;&#10; - Black/silence: a black frame is generated as output (sound is set to silence)&#13;&#10; - No output: no output is given"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>Loop</Label>
                  <Label>Keep last frame;Black/silence;No output</Label>
                </Layout>
              </Parameter>
              <Parameter id="play" name="Play" descr="Start/resume playing file" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="pause" name="Pause" descr="Start/resume playing file" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="goto_start" name="Go To Start" descr="Go back to start of file"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="video_output" name="Output video" descr="Output video">
                <Datatype type="6"/>
              </Output>
              <Output id="audio_output" name="Output Audio" descr="Output audio">
                <Datatype type="9"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="frame" name="Frame index" descr="Frame index">
                <Datatype type="4"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="NoInputToTrigger_1" catalog="base" class_id="NoInputToTrigger">
            <Parameters>
              <Parameter id="repeat" name="Repeat" descr="A trigger is generated when the time interval specified by the Delay parameter is elapsed. If the same time interval passes again and input is still not received the block repeats the generation of a trigger or not depending on the value of this parameter."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Trigger" descr="A trigger is generated if a fixed delay has elapsed since receiving the last input. The trigger can be only one or can repeat depending on the Repeat parameter.">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Generic input" descr="You can connect any kind of output to this input pin. If no input is received after a fixed time (specified in the Delay parameter) is elapsed a trigger is generated.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_3" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_6" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="TokenizeString_1" catalog="base" class_id="tokenize_string">
            <Parameters>
              <Parameter id="separator_string" name="Separator" descr="Character that separate InputString into substrings."
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="newline_as_separator" name="Is NewLine Separator" descr="Whether the newline character is included in the separators."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="tab_as_separator" name="Is Tab Separator" descr="Whether the tab character is included in the separators."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_string" name="InputString" descr="String that will be tokenized.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ReadStringFromfile_1" catalog="base" class_id="read_string_from_file">
            <Parameters>
              <Parameter id="par_file_name" name="FileName" descr="Text file name." exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="par_reload" name="Reload" descr="Reloads file and generates againg the output."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_string" name="OutString" descr="Output string from file.">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_1" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - int_1" catalog="kernel" class_id="scalar_arith_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_1" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - int_2" catalog="kernel" class_id="scalar_arith_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_1" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_2" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringDisplay_5" catalog="system" class_id="string_display">
            <Parameters>
              <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Near (left);Center</Label>
                  <Label>Far (right)</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="string" name="Input string" descr="Input string to display.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ReplaceString_1" catalog="base" class_id="replace_string">
            <Parameters>
              <Parameter id="find" name="SubstringToReplace" descr="Find this substring inside the input string and replace it."
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="replace_with" name="ReplaceWith" descr="Replace the SubstringToReplace parameter with this substring."
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="replace_mode" name="ReplaceMode" descr="It is possible to replace alle the occurrences of the substring or just the first one."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>AllOccurences;FirstOccurence</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_string" name="ReplacedString" descr="Replaced string.">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_string" name="InputString" descr="Input string that must be replaced.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_1" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_3" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Counter_1" catalog="base" class_id="Counter">
            <Parameters>
              <Parameter id="Step" name="Step" descr="Step Description" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Begin" name="Begin" descr="Begin Description" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="End" name="End" descr="End Description" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="CustomReset" name="Custom reset value" descr="When the counter is reset, and the reset mode is set to custom value, this value is used."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Start" name="Start" descr="Start Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Stop" name="Stop" descr="Stop Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Reset" name="Reset" descr="Reset Description" exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="ResetMode" name="Reset mode" descr="Specifies the behaviour when the counter is reset. The counter can reset to the initial value (Begin) or to a custom value."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Begin</Label>
                  <Label>Custom value</Label>
                </Layout>
              </Parameter>
              <Parameter id="TypeCounter" name="Bounding mode" descr="Specifies whether the counter is bounded (stops counting after a given bound is reached), unbounded (counts forever) or circular (restart from the beginning after a given bound is reached)."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Unbounded counter;Bounded counter</Label>
                  <Label>Circular counter</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output" descr="Output Description">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input Descrption">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetFilePathComponent_3" catalog="base" class_id="GetFilePathComponent">
            <Parameters>
              <Parameter id="ComponentType" name="Component type" descr="Used to set the type of component to be extracted"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>File Name or Folder Name</Label>
                  <Label>Path</Label>
                  <Label>File Stem (Filename Without Extension)</Label>
                  <Label>File Extension</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="OutputComponent" name="File Name" descr="The extracted file name">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputPath" name="Input File Path" descr="The input file path">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Counter_6" catalog="base" class_id="Counter">
            <Parameters>
              <Parameter id="Step" name="Step" descr="Step Description" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Begin" name="Begin" descr="Begin Description" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="End" name="End" descr="End Description" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="CustomReset" name="Custom reset value" descr="When the counter is reset, and the reset mode is set to custom value, this value is used."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Start" name="Start" descr="Start Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Stop" name="Stop" descr="Stop Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Reset" name="Reset" descr="Reset Description" exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="ResetMode" name="Reset mode" descr="Specifies the behaviour when the counter is reset. The counter can reset to the initial value (Begin) or to a custom value."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Begin</Label>
                  <Label>Custom value</Label>
                </Layout>
              </Parameter>
              <Parameter id="TypeCounter" name="Bounding mode" descr="Specifies whether the counter is bounded (stops counting after a given bound is reached), unbounded (counts forever) or circular (restart from the beginning after a given bound is reached)."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Unbounded counter;Bounded counter</Label>
                  <Label>Circular counter</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output" descr="Output Description">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input Descrption">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ContainerSize_1" catalog="base" class_id="container_size">
            <Parameters/>
            <Outputs>
              <Output id="output" name="Output" descr="Size of the input container">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This is the container which size will be estracted by the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="CompareWithValue - int_1" catalog="kernel" class_id="comparison_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Less Than (&lt;)</Label>
                  <Label>Less Than or Equal To (&lt;=);Equal To (=);Different From (!= or &lt;&gt;)</Label>
                  <Label>Greater Than (&gt;)</Label>
                  <Label>Greater Than or Equal To (&gt;=)</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Value" descr="Value to compare with the input pin."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Result of comparison operation.">
                <Datatype type="1"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input before comparing datatype.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BooleanToTrigger_1" catalog="base" class_id="bool_to_trigger">
            <Parameters>
              <Parameter id="mode" name="Mode" descr="Specifies when to generate the output trigger. "
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>False to true;True to false</Label>
                  <Label>Any change</Label>
                  <Label>True;False</Label>
                </Layout>
              </Parameter>
              <Parameter id="initial_state" name="Initial state" descr="This value is used only at first signal change detection to initialize the previous signal state."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Indeterminate;True</Label>
                  <Label>False</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output trigger datatype.">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input boolean datatype. The block generates a trigger as output according to the value of this datatype.">
                <Datatype type="1"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringDisplay_6" catalog="system" class_id="string_display">
            <Parameters>
              <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Near (left);Center</Label>
                  <Label>Far (right)</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="string" name="Input string" descr="Input string to display.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_98" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_4" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_6" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringDisplay_8" catalog="system" class_id="string_display">
            <Parameters>
              <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Near (left);Center</Label>
                  <Label>Far (right)</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="string" name="Input string" descr="Input string to display.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_2" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="TokenizeString_2" catalog="base" class_id="tokenize_string">
            <Parameters>
              <Parameter id="separator_string" name="Separator" descr="Character that separate InputString into substrings."
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="newline_as_separator" name="Is NewLine Separator" descr="Whether the newline character is included in the separators."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="tab_as_separator" name="Is Tab Separator" descr="Whether the tab character is included in the separators."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_string" name="InputString" descr="String that will be tokenized.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_3" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Delay_1" catalog="kernel" class_id="delay">
            <Parameters>
              <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output datatype (delayed)">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_14" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_15" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_4" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Switch_16" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_2" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_8" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="WriteToFile_8" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_17" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_9" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_18" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_10" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_19" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_11" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_20" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_12" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_09" name="Input09" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_10" name="Input10" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_21" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_13" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_09" name="Input09" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_10" name="Input10" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_11" name="Input11" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_12" name="Input12" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_22" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_2" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_7" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_8" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_23" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_1" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_2" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_2" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_3" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_4" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_6" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_9" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_4" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_5" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_1" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_3" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_1" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*OF1" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StartTracking" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_1" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_8" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_3" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_4" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_3" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_9" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_10" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_24" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_3" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_4" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_5" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_2" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_6" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_2" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_3" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_2" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_3" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_2" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_7" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_2" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*OF2" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_18" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_9" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_10" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_2" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_5" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_4" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_11" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_12" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_25" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_5" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_6" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_8" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_4" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_9" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_4" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_5" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_6" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_7" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_3" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_10" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_3" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DrawGraphicObject_4" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_19" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_11" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_12" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_6" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_7" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_5" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_13" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_14" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_26" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_7" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_8" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_11" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_5" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_12" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_7" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_8" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_8" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_9" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_4" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_13" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_4" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DrawGraphicObject_5" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_20" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_13" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_14" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_8" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_9" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_6" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_15" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_16" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_27" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_9" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_10" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_14" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_6" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_15" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_10" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_11" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_10" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_11" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_5" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_16" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_5" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DrawGraphicObject_6" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_21" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_15" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_16" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_10" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_11" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_7" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_17" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_18" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_28" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_11" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_12" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_17" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_7" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_18" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_12" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_13" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_12" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_13" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_6" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_19" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_6" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DrawGraphicObject_7" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_22" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_17" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_18" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_12" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_13" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_10" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_11" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConcatenateStrings_5" catalog="base" class_id="concatenate_strings">
            <Parameters/>
            <Outputs>
              <Output id="output" name="Output string" descr="The concatenation of the input strings">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_3" name="Input string 3" descr="The input string 3 wil be placed at position 3 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_4" name="Input string 4" descr="The input string 4 wil be placed at position 4 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_5" name="Input string 5" descr="The input string 5 wil be placed at position 5 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_11" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*KCF1" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*KCF2" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Shape2DInfo-int_1" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_1" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Shape2DInfo-int_2" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_8" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarDisplay_11" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_20" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_21" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_24" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Shape2DInfo-int_3" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_9" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Shape2DInfo-int_4" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_10" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Shape2DInfo-int_5" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_11" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Shape2DInfo-int_6" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_12" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarDisplay_25" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_26" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_27" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_28" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_29" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_30" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_31" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_32" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_14" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_23" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_15" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_24" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_16" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_25" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_17" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_26" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_18" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_09" name="Input09" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_10" name="Input10" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_27" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_19" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_09" name="Input09" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_10" name="Input10" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_11" name="Input11" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_12" name="Input12" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_28" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConcatenateStrings_6" catalog="base" class_id="concatenate_strings">
            <Parameters/>
            <Outputs>
              <Output id="output" name="Output string" descr="The concatenation of the input strings">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_3" name="Input string 3" descr="The input string 3 wil be placed at position 3 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_4" name="Input string 4" descr="The input string 4 wil be placed at position 4 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_5" name="Input string 5" descr="The input string 5 wil be placed at position 5 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_12" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="DisplayGDI-Interact_12" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_13" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_9" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_10" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_11" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Switch_29" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_30" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_31" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_12" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Switch_32" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_33" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_15" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Switch_40" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_39" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_41" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_42" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_49" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_50" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_51" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_52" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_53" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_54" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_7" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_36" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_44" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_2" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_3" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_4" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_5" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_2" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_3" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_4" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_5" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_2" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_34" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_3" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_35" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_4" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_37" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_5" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_38" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_6" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_43" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="FileStem" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="GetSpecialFolder_3" catalog="kernel" class_id="get_special_folder">
            <Parameters>
              <Parameter id="folder_type" name="Special Folder Type" descr="Specifies which type of folder to query.&#10; - KernelFolder: the folder where the EyesWeb kernel dll currently in use is located&#10; - PatchFolder: the folder where the currently running patch is located"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>KernelFolder</Label>
                  <Label>PatchFolder</Label>
                </Layout>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Specifies if the block has to output the folder continuously or not.&#10;"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="folder" name="Folder" descr="The queried folder">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_2" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_6" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_FeedBack" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_13" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_TrialActualNumber" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_TrialTotalNumber" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_fileFD" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_fileOF" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_fileKCF" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_13" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_3" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_4" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_5" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_6" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="SetToNull" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_25" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_4" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_5" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_14" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="SpawnCommand_1" catalog="base" class_id="spawn_command">
            <Parameters>
              <Parameter id="allow_duplicates" name="Allow duplicates" descr="If set to true, dusplicates commands are executed. If set to false, only the first occurance is executed"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="handle_process" name="OutputHandle" descr="The handler of the process executed">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="command_string" name="InputCommand" descr="The command-line of the process to be executed">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_22" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Close Gui" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="SetShapeFill_1" catalog="base" class_id="set_shape_properties_2d">
            <Parameters>
              <Parameter id="set_filled" name="SetFilled" descr="Specifies whether to set the filled property of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="filled" name="Filled" descr="Specifies whether the shape is filled or not."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_color" name="SetFillColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetFillAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="FillAlpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the shape properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeFill_2" catalog="base" class_id="set_shape_properties_2d">
            <Parameters>
              <Parameter id="set_filled" name="SetFilled" descr="Specifies whether to set the filled property of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="filled" name="Filled" descr="Specifies whether the shape is filled or not."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_color" name="SetFillColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetFillAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="FillAlpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the shape properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_14" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Arithmetic_1" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_7" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_8" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Delay_2" catalog="kernel" class_id="delay">
            <Parameters>
              <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output datatype (delayed)">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - int_4" catalog="kernel" class_id="scalar_arith_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_10" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_11" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_5" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_12" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Arithmetic_14" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*Comment" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_8" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Size2DGenerator_1" catalog="base" class_id="point_2d_generator">
            <Parameters>
              <Parameter id="height" name="integer_height" descr="It specifies integer height value of size datatype."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="width" name="integer_width" descr="It specifies integer width value of size datatype."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="*MF1" catalog="kernel" class_id="int_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*alphaBackgroundParam" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*alphaForegroundParam" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*alphaBackgroundParam2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*alphaForegroundParam2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*LoadConfig" catalog="kernel" class_id="comparison_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Less Than (&lt;)</Label>
                  <Label>Less Than or Equal To (&lt;=);Equal To (=);Different From (!= or &lt;&gt;)</Label>
                  <Label>Greater Than (&gt;)</Label>
                  <Label>Greater Than or Equal To (&gt;=)</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Value" descr="Value to compare with the input pin."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Result of comparison operation.">
                <Datatype type="1"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input before comparing datatype.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_13" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_23" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_24" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_7" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Size2DGenerator_2" catalog="base" class_id="point_2d_generator">
            <Parameters>
              <Parameter id="height" name="integer_height" descr="It specifies integer height value of size datatype."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="width" name="integer_width" descr="It specifies integer width value of size datatype."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="*MF2" catalog="kernel" class_id="int_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_9" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*LoadConfigVisible" catalog="kernel" class_id="comparison_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Less Than (&lt;)</Label>
                  <Label>Less Than or Equal To (&lt;=);Equal To (=);Different From (!= or &lt;&gt;)</Label>
                  <Label>Greater Than (&gt;)</Label>
                  <Label>Greater Than or Equal To (&gt;=)</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Value" descr="Value to compare with the input pin."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Result of comparison operation.">
                <Datatype type="1"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input before comparing datatype.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_14" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_15" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_16" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_16" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Restart" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Delay_3" catalog="kernel" class_id="delay">
            <Parameters>
              <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output datatype (delayed)">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Delay_4" catalog="kernel" class_id="delay">
            <Parameters>
              <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output datatype (delayed)">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="CompareWithString_1" catalog="base" class_id="compare_string">
            <Parameters>
              <Parameter id="compare_string" name="StringTemplate" descr="Template string for comparison. (use regular expression syntax in Perl syntax: http://www.boost.org/libs/regex/doc/syntax_perl.html#Perl). For example, .* pattern matches any number of characters, thus behaving similarly to the * pattern.So if you need to match objects with label starting with 'point' substring, you can write (point).* instead, if you need to match objects with label containing 'point' substring, you can write .*(point).* "
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_comparison" name="CompareValue" descr="The output value is 1 if the strings match, 0 otherwise. ">
                <Datatype type="1"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_string" name="InputString" descr="String to compare">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BooleanToTrigger_2" catalog="base" class_id="bool_to_trigger">
            <Parameters>
              <Parameter id="mode" name="Mode" descr="Specifies when to generate the output trigger. "
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>False to true;True to false</Label>
                  <Label>Any change</Label>
                  <Label>True;False</Label>
                </Layout>
              </Parameter>
              <Parameter id="initial_state" name="Initial state" descr="This value is used only at first signal change detection to initialize the previous signal state."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Indeterminate;True</Label>
                  <Label>False</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output trigger datatype.">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input boolean datatype. The block generates a trigger as output according to the value of this datatype.">
                <Datatype type="1"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Counter_2" catalog="base" class_id="Counter">
            <Parameters>
              <Parameter id="Step" name="Step" descr="Step Description" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Begin" name="Begin" descr="Begin Description" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="End" name="End" descr="End Description" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="CustomReset" name="Custom reset value" descr="When the counter is reset, and the reset mode is set to custom value, this value is used."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Start" name="Start" descr="Start Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Stop" name="Stop" descr="Stop Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Reset" name="Reset" descr="Reset Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="ResetMode" name="Reset mode" descr="Specifies the behaviour when the counter is reset. The counter can reset to the initial value (Begin) or to a custom value."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Begin</Label>
                  <Label>Custom value</Label>
                </Layout>
              </Parameter>
              <Parameter id="TypeCounter" name="Bounding mode" descr="Specifies whether the counter is bounded (stops counting after a given bound is reached), unbounded (counts forever) or circular (restart from the beginning after a given bound is reached)."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Unbounded counter;Bounded counter</Label>
                  <Label>Circular counter</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output" descr="Output Description">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input Descrption">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*StartIsPressed" catalog="kernel" class_id="comparison_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Less Than (&lt;)</Label>
                  <Label>Less Than or Equal To (&lt;=);Equal To (=);Different From (!= or &lt;&gt;)</Label>
                  <Label>Greater Than (&gt;)</Label>
                  <Label>Greater Than or Equal To (&gt;=)</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Value" descr="Value to compare with the input pin."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Result of comparison operation.">
                <Datatype type="1"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input before comparing datatype.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_17" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_18" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_19" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_17" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="DoubleGenerator_2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="DoubleGenerator_3" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*OFPL1" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*OFPLK1" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*OFPL2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*OFPLK2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*OFITN1" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*OFITN2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*FrameInitString" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
        </Blocks>
        <SubpatchParamPins/>
        <SubpatchOutputPins/>
        <SubpatchInputPins/>
      </PatchOutline>
      <EywSheetBindSheetVisible patch="" label="" id=""/>
    </Sheet>
    <Sheet title="Frame Differencing" bgnd_colour="ffa7b2b2" SheetPatch="VideoTrackerTool">
      <SheetItems>
        <SheetItem type="3003" tooltip_text="" rectangle="64 56 457 377">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="*FD1" id="output_video_stream"/>
        </SheetItem>
        <SheetItem type="3003" tooltip_text="" rectangle="552 56 457 377">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="*FD2" id="output_video_stream"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="64 496 457 49" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="bbffffff"
                   min_val="0" max_val="1" step="0.01" skew_factor="1" unit_name=""
                   text_pos="1" text_width="60" text_height="20" text_editable="1"
                   text_bgnd_colour="ffffffff" text_txt_colour="ff000000" text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*alphaBackgroundParam"
                       id="value"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="64 600 457 49" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="bbffffff"
                   min_val="0" max_val="1" step="0.01" skew_factor="1" unit_name=""
                   text_pos="1" text_width="60" text_height="20" text_editable="1"
                   text_bgnd_colour="ffffffff" text_txt_colour="ff000000" text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*alphaForegroundParam"
                       id="value"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="240 24 103 30" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>RO1 1<Font name="Arial" size="29.700000762939453" style="0"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="552 496 449 49" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="bbffffff"
                   min_val="0" max_val="1" step="0.01" skew_factor="1" unit_name=""
                   text_pos="1" text_width="60" text_height="20" text_editable="1"
                   text_bgnd_colour="ffffffff" text_txt_colour="ff000000" text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*alphaBackgroundParam2"
                       id="value"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="552 600 449 49" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="bbffffff"
                   min_val="0" max_val="1" step="0.01" skew_factor="1" unit_name=""
                   text_pos="1" text_width="60" text_height="20" text_editable="1"
                   text_bgnd_colour="ffffffff" text_txt_colour="ff000000" text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*alphaForegroundParam2"
                       id="value"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="64 704 457 49" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="bbffffff"
                   min_val="3" max_val="21" step="1" skew_factor="1" unit_name=""
                   text_pos="1" text_width="60" text_height="20" text_editable="1"
                   text_bgnd_colour="ffffffff" text_txt_colour="ff000000" text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*MF1" id="value"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="552 704 449 49" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="ff1a1212"
                   min_val="3" max_val="21" step="1" skew_factor="1" unit_name=""
                   text_pos="1" text_width="60" text_height="20" text_editable="1"
                   text_bgnd_colour="ffffffff" text_txt_colour="ff000000" text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*MF2" id="value"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="736 24 103 30" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>RO1 2<Font name="Arial" size="29.700000762939453" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="296 432 473 73" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>ALPHA BACKGROUND<Font name="Cambria" size="22.100000381469727" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="296 536 473 73" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>ALPHA FOREGROUND<Font name="Cambria" size="22.100000381469727" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="296 640 473 73" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>MEDIAN FILTER ORDER<Font name="Cambria" size="22.100000381469727" style="0"/>
        </SheetItem>
      </SheetItems>
      <ConnectionParams host="localhost" port="7834"/>
      <PatchOutline imported_patch="VideoTrackerTool">
        <Blocks>
          <Block label="DisplayGDI-Interact_1" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_1" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_12" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConcatenateStrings_2" catalog="base" class_id="concatenate_strings">
            <Parameters/>
            <Outputs>
              <Output id="output" name="Output string" descr="The concatenation of the input strings">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_3" name="Input string 3" descr="The input string 3 wil be placed at position 3 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_4" name="Input string 4" descr="The input string 4 wil be placed at position 4 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_5" name="Input string 5" descr="The input string 5 wil be placed at position 5 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_3" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConcatenateStrings_3" catalog="base" class_id="concatenate_strings">
            <Parameters/>
            <Outputs>
              <Output id="output" name="Output string" descr="The concatenation of the input strings">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="_ResultFolder" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_RoiFile" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_1" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringDisplay_2" catalog="system" class_id="string_display">
            <Parameters>
              <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Near (left);Center</Label>
                  <Label>Far (right)</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="string" name="Input string" descr="Input string to display.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_1" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="1">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="1">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_1" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_1" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*FD1" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_5" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_3" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_5" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_2" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - int_3" catalog="kernel" class_id="scalar_arith_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OutputSelector_1" catalog="kernel" class_id="output_selector">
            <Parameters>
              <Parameter id="active_output" name="Active output" descr="Zero-based index of the active output. The selected output is activated."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_1" name="Output 1" descr="0 output of the block.">
                <Datatype type="0"/>
              </Output>
              <Output id="output_2" name="Output 2" descr="1 output of the block.">
                <Datatype type="0"/>
              </Output>
              <Output id="output_3" name="Output 3" descr="2 output of the block.">
                <Datatype type="0"/>
              </Output>
              <Output id="output_4" name="Output 4" descr="3 output of the block.">
                <Datatype type="0"/>
              </Output>
              <Output id="output_5" name="Output 5" descr="4 output of the block.">
                <Datatype type="0"/>
              </Output>
              <Output id="output_6" name="Output 6" descr="5 output of the block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input of the selector. The input is propagated to the choosen output.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_2" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_7" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_8" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_9" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_2" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_3" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_4" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_5" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_2" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_2" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="1">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="1">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_2" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_2" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*FD2" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_2" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_4" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_3" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_3" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_3" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageMedianFilter_3" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_3" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_5" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_4" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_4" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_4" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageMedianFilter_4" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_4" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_6" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_5" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_5" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_5" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageMedianFilter_5" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_6" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_7" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_6" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_6" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_6" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageMedianFilter_6" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_7" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_2" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_3" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_5" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_4" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_6" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_7" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_8" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_3" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_9" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_4" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_10" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_5" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_11" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_6" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_12" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_7" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_13" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_7" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarDisplay_9" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_10" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_12" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_13" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_1" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringDisplay_7" catalog="system" class_id="string_display">
            <Parameters>
              <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Near (left);Center</Label>
                  <Label>Far (right)</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="string" name="Input string" descr="Input string to display.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_2" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_14" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_15" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_16" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_17" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_18" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_19" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_4" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_5" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_6" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_13" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_14" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_15" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_16" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_17" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_18" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_2" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_5" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="StringToInt_2" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_3" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_4" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_5" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_6" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_7" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_8" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_9" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_10" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_3" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_4" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_6" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_6" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_22" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_65" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_23" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_24" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_66" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_25" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_67" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_26" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_27" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_68" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_85" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_77" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_86" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_87" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_78" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_79" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_7" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_8" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_9" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_10" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_11" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_12" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_11" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_12" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_13" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_14" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_15" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_16" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_4" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_2" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_5" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_3" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_19" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_17" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_20" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_21" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_18" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_28" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_29" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_19" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_20" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_30" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_31" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_21" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_22" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_7" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_7" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_32" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_23" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_33" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_24" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_34" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_35" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_36" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_37" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_38" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_39" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_25" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_26" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_27" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_28" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_29" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_30" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_8" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_8" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_9" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_9" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_40" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_31" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_41" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_42" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_32" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_43" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_44" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_33" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_34" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_45" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_46" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_35" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_36" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_10" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_10" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_47" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_37" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_48" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_38" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_49" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_50" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_39" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_40" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_11" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_11" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_51" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_41" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_52" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_42" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_53" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_54" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_55" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_56" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_57" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_58" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_43" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_44" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_45" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_46" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_47" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_48" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_12" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_12" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_13" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_13" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_59" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_49" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_60" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_61" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_50" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_62" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_63" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_51" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_52" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_64" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_65" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_53" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_54" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_14" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_14" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_66" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_55" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_67" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_56" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_68" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_69" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_57" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_58" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_15" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_15" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_70" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_59" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_71" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_60" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_72" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_73" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_61" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_62" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_16" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_16" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_74" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_63" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_75" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_64" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_76" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_77" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_78" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_79" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_80" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_81" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_69" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_70" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_71" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_72" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_73" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_74" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_17" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_17" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_18" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_18" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_82" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_75" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_83" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_84" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_76" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_88" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_89" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_80" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_81" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_90" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_91" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_82" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_83" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_19" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_19" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_92" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_84" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_93" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_85" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_94" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_95" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_86" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_87" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_20" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_20" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_96" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_88" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_97" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_89" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_98" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_99" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_90" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_91" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_21" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_21" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_100" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_92" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_101" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_93" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_102" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_103" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_94" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_95" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_22" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_22" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_104" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_96" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_105" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_97" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_1" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ComputeFPS_1" catalog="base" class_id="compute_fps">
            <Parameters>
              <Parameter id="selector" name="Selector" descr="Each datatype has more than one timestamp attached to itself. This parameter specifies which one to use when computing FPS"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Creation Time;Presentation Time</Label>
                  <Label>Media Time</Label>
                </Layout>
              </Parameter>
              <Parameter id="window_size" name="Window size" descr="To obtain a reliable measure, an average is performed on the last measured samples. This parameter specifies the size of the window. A size of one means that no average is performed."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="rese" name="Reset" descr="Reset the current window storing the last 'window size' timestamps"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="FPS" descr="Computed Frames Per Second">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input datatype whom framerate is going to be computed">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MediafileReader_1" catalog="base" class_id="media_file_reader_new">
            <Parameters>
              <Parameter id="media_filename" name="Filename" descr="Filepath of media file. An empty filename is allowed; the corresponding video output is black, the corresponding audio output is silence"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="out_of_bound_management" name="End of file mode" descr="Describes the behaviour of the reader when an end of file is reached:&#13;&#10; - Loop: playback restart from the beginning of the file&#13;&#10; - Keep last frame: the last frame is repeaed indefinitely&#13;&#10; - Black/silence: a black frame is generated as output (sound is set to silence)&#13;&#10; - No output: no output is given"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>Loop</Label>
                  <Label>Keep last frame;Black/silence;No output</Label>
                </Layout>
              </Parameter>
              <Parameter id="play" name="Play" descr="Start/resume playing file" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="pause" name="Pause" descr="Start/resume playing file" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="goto_start" name="Go To Start" descr="Go back to start of file"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="video_output" name="Output video" descr="Output video">
                <Datatype type="6"/>
              </Output>
              <Output id="audio_output" name="Output Audio" descr="Output audio">
                <Datatype type="9"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="frame" name="Frame index" descr="Frame index">
                <Datatype type="4"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="NoInputToTrigger_1" catalog="base" class_id="NoInputToTrigger">
            <Parameters>
              <Parameter id="repeat" name="Repeat" descr="A trigger is generated when the time interval specified by the Delay parameter is elapsed. If the same time interval passes again and input is still not received the block repeats the generation of a trigger or not depending on the value of this parameter."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Trigger" descr="A trigger is generated if a fixed delay has elapsed since receiving the last input. The trigger can be only one or can repeat depending on the Repeat parameter.">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Generic input" descr="You can connect any kind of output to this input pin. If no input is received after a fixed time (specified in the Delay parameter) is elapsed a trigger is generated.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_3" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_6" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="TokenizeString_1" catalog="base" class_id="tokenize_string">
            <Parameters>
              <Parameter id="separator_string" name="Separator" descr="Character that separate InputString into substrings."
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="newline_as_separator" name="Is NewLine Separator" descr="Whether the newline character is included in the separators."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="tab_as_separator" name="Is Tab Separator" descr="Whether the tab character is included in the separators."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_string" name="InputString" descr="String that will be tokenized.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ReadStringFromfile_1" catalog="base" class_id="read_string_from_file">
            <Parameters>
              <Parameter id="par_file_name" name="FileName" descr="Text file name." exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="par_reload" name="Reload" descr="Reloads file and generates againg the output."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_string" name="OutString" descr="Output string from file.">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_1" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - int_1" catalog="kernel" class_id="scalar_arith_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_1" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - int_2" catalog="kernel" class_id="scalar_arith_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_1" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_2" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringDisplay_5" catalog="system" class_id="string_display">
            <Parameters>
              <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Near (left);Center</Label>
                  <Label>Far (right)</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="string" name="Input string" descr="Input string to display.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ReplaceString_1" catalog="base" class_id="replace_string">
            <Parameters>
              <Parameter id="find" name="SubstringToReplace" descr="Find this substring inside the input string and replace it."
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="replace_with" name="ReplaceWith" descr="Replace the SubstringToReplace parameter with this substring."
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="replace_mode" name="ReplaceMode" descr="It is possible to replace alle the occurrences of the substring or just the first one."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>AllOccurences;FirstOccurence</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_string" name="ReplacedString" descr="Replaced string.">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_string" name="InputString" descr="Input string that must be replaced.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_1" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_3" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Counter_1" catalog="base" class_id="Counter">
            <Parameters>
              <Parameter id="Step" name="Step" descr="Step Description" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Begin" name="Begin" descr="Begin Description" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="End" name="End" descr="End Description" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="CustomReset" name="Custom reset value" descr="When the counter is reset, and the reset mode is set to custom value, this value is used."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Start" name="Start" descr="Start Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Stop" name="Stop" descr="Stop Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Reset" name="Reset" descr="Reset Description" exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="ResetMode" name="Reset mode" descr="Specifies the behaviour when the counter is reset. The counter can reset to the initial value (Begin) or to a custom value."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Begin</Label>
                  <Label>Custom value</Label>
                </Layout>
              </Parameter>
              <Parameter id="TypeCounter" name="Bounding mode" descr="Specifies whether the counter is bounded (stops counting after a given bound is reached), unbounded (counts forever) or circular (restart from the beginning after a given bound is reached)."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Unbounded counter;Bounded counter</Label>
                  <Label>Circular counter</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output" descr="Output Description">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input Descrption">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetFilePathComponent_3" catalog="base" class_id="GetFilePathComponent">
            <Parameters>
              <Parameter id="ComponentType" name="Component type" descr="Used to set the type of component to be extracted"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>File Name or Folder Name</Label>
                  <Label>Path</Label>
                  <Label>File Stem (Filename Without Extension)</Label>
                  <Label>File Extension</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="OutputComponent" name="File Name" descr="The extracted file name">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputPath" name="Input File Path" descr="The input file path">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Counter_6" catalog="base" class_id="Counter">
            <Parameters>
              <Parameter id="Step" name="Step" descr="Step Description" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Begin" name="Begin" descr="Begin Description" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="End" name="End" descr="End Description" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="CustomReset" name="Custom reset value" descr="When the counter is reset, and the reset mode is set to custom value, this value is used."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Start" name="Start" descr="Start Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Stop" name="Stop" descr="Stop Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Reset" name="Reset" descr="Reset Description" exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="ResetMode" name="Reset mode" descr="Specifies the behaviour when the counter is reset. The counter can reset to the initial value (Begin) or to a custom value."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Begin</Label>
                  <Label>Custom value</Label>
                </Layout>
              </Parameter>
              <Parameter id="TypeCounter" name="Bounding mode" descr="Specifies whether the counter is bounded (stops counting after a given bound is reached), unbounded (counts forever) or circular (restart from the beginning after a given bound is reached)."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Unbounded counter;Bounded counter</Label>
                  <Label>Circular counter</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output" descr="Output Description">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input Descrption">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ContainerSize_1" catalog="base" class_id="container_size">
            <Parameters/>
            <Outputs>
              <Output id="output" name="Output" descr="Size of the input container">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This is the container which size will be estracted by the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="CompareWithValue - int_1" catalog="kernel" class_id="comparison_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Less Than (&lt;)</Label>
                  <Label>Less Than or Equal To (&lt;=);Equal To (=);Different From (!= or &lt;&gt;)</Label>
                  <Label>Greater Than (&gt;)</Label>
                  <Label>Greater Than or Equal To (&gt;=)</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Value" descr="Value to compare with the input pin."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Result of comparison operation.">
                <Datatype type="1"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input before comparing datatype.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BooleanToTrigger_1" catalog="base" class_id="bool_to_trigger">
            <Parameters>
              <Parameter id="mode" name="Mode" descr="Specifies when to generate the output trigger. "
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>False to true;True to false</Label>
                  <Label>Any change</Label>
                  <Label>True;False</Label>
                </Layout>
              </Parameter>
              <Parameter id="initial_state" name="Initial state" descr="This value is used only at first signal change detection to initialize the previous signal state."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Indeterminate;True</Label>
                  <Label>False</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output trigger datatype.">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input boolean datatype. The block generates a trigger as output according to the value of this datatype.">
                <Datatype type="1"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringDisplay_6" catalog="system" class_id="string_display">
            <Parameters>
              <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Near (left);Center</Label>
                  <Label>Far (right)</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="string" name="Input string" descr="Input string to display.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_98" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_4" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_6" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringDisplay_8" catalog="system" class_id="string_display">
            <Parameters>
              <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Near (left);Center</Label>
                  <Label>Far (right)</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="string" name="Input string" descr="Input string to display.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_2" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="TokenizeString_2" catalog="base" class_id="tokenize_string">
            <Parameters>
              <Parameter id="separator_string" name="Separator" descr="Character that separate InputString into substrings."
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="newline_as_separator" name="Is NewLine Separator" descr="Whether the newline character is included in the separators."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="tab_as_separator" name="Is Tab Separator" descr="Whether the tab character is included in the separators."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_string" name="InputString" descr="String that will be tokenized.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_3" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Delay_1" catalog="kernel" class_id="delay">
            <Parameters>
              <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output datatype (delayed)">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_14" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_15" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_4" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Switch_16" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_2" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_8" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="WriteToFile_8" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_17" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_9" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_18" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_10" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_19" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_11" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_20" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_12" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_09" name="Input09" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_10" name="Input10" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_21" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_13" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_09" name="Input09" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_10" name="Input10" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_11" name="Input11" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_12" name="Input12" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_22" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_2" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_7" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_8" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_23" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_1" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_2" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_2" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_3" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_4" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_6" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_9" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_4" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_5" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_1" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_3" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_1" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*OF1" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StartTracking" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_1" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_8" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_3" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_4" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_3" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_9" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_10" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_24" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_3" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_4" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_5" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_2" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_6" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_2" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_3" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_2" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_3" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_2" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_7" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_2" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*OF2" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_18" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_9" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_10" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_2" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_5" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_4" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_11" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_12" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_25" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_5" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_6" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_8" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_4" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_9" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_4" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_5" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_6" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_7" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_3" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_10" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_3" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DrawGraphicObject_4" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_19" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_11" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_12" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_6" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_7" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_5" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_13" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_14" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_26" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_7" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_8" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_11" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_5" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_12" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_7" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_8" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_8" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_9" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_4" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_13" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_4" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DrawGraphicObject_5" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_20" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_13" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_14" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_8" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_9" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_6" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_15" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_16" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_27" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_9" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_10" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_14" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_6" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_15" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_10" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_11" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_10" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_11" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_5" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_16" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_5" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DrawGraphicObject_6" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_21" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_15" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_16" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_10" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_11" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_7" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_17" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_18" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_28" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_11" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_12" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_17" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_7" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_18" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_12" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_13" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_12" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_13" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_6" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_19" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_6" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DrawGraphicObject_7" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_22" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_17" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_18" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_12" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_13" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_10" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_11" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConcatenateStrings_5" catalog="base" class_id="concatenate_strings">
            <Parameters/>
            <Outputs>
              <Output id="output" name="Output string" descr="The concatenation of the input strings">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_3" name="Input string 3" descr="The input string 3 wil be placed at position 3 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_4" name="Input string 4" descr="The input string 4 wil be placed at position 4 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_5" name="Input string 5" descr="The input string 5 wil be placed at position 5 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_11" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*KCF1" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*KCF2" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Shape2DInfo-int_1" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_1" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Shape2DInfo-int_2" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_8" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarDisplay_11" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_20" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_21" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_24" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Shape2DInfo-int_3" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_9" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Shape2DInfo-int_4" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_10" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Shape2DInfo-int_5" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_11" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Shape2DInfo-int_6" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_12" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarDisplay_25" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_26" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_27" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_28" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_29" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_30" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_31" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_32" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_14" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_23" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_15" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_24" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_16" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_25" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_17" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_26" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_18" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_09" name="Input09" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_10" name="Input10" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_27" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_19" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_09" name="Input09" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_10" name="Input10" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_11" name="Input11" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_12" name="Input12" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_28" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConcatenateStrings_6" catalog="base" class_id="concatenate_strings">
            <Parameters/>
            <Outputs>
              <Output id="output" name="Output string" descr="The concatenation of the input strings">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_3" name="Input string 3" descr="The input string 3 wil be placed at position 3 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_4" name="Input string 4" descr="The input string 4 wil be placed at position 4 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_5" name="Input string 5" descr="The input string 5 wil be placed at position 5 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_12" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="DisplayGDI-Interact_12" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_13" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_9" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_10" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_11" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Switch_29" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_30" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_31" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_12" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Switch_32" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_33" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_15" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Switch_40" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_39" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_41" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_42" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_49" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_50" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_51" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_52" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_53" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_54" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_7" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_36" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_44" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_2" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_3" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_4" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_5" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_2" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_3" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_4" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_5" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_2" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_34" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_3" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_35" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_4" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_37" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_5" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_38" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_6" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_43" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="FileStem" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="GetSpecialFolder_3" catalog="kernel" class_id="get_special_folder">
            <Parameters>
              <Parameter id="folder_type" name="Special Folder Type" descr="Specifies which type of folder to query.&#10; - KernelFolder: the folder where the EyesWeb kernel dll currently in use is located&#10; - PatchFolder: the folder where the currently running patch is located"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>KernelFolder</Label>
                  <Label>PatchFolder</Label>
                </Layout>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Specifies if the block has to output the folder continuously or not.&#10;"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="folder" name="Folder" descr="The queried folder">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_2" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_6" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_FeedBack" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_13" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_TrialActualNumber" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_TrialTotalNumber" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_fileFD" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_fileOF" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_fileKCF" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_13" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_3" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_4" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_5" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_6" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="SetToNull" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_25" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_4" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_5" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_14" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="SpawnCommand_1" catalog="base" class_id="spawn_command">
            <Parameters>
              <Parameter id="allow_duplicates" name="Allow duplicates" descr="If set to true, dusplicates commands are executed. If set to false, only the first occurance is executed"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="handle_process" name="OutputHandle" descr="The handler of the process executed">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="command_string" name="InputCommand" descr="The command-line of the process to be executed">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_22" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Close Gui" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="SetShapeFill_1" catalog="base" class_id="set_shape_properties_2d">
            <Parameters>
              <Parameter id="set_filled" name="SetFilled" descr="Specifies whether to set the filled property of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="filled" name="Filled" descr="Specifies whether the shape is filled or not."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_color" name="SetFillColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetFillAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="FillAlpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the shape properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeFill_2" catalog="base" class_id="set_shape_properties_2d">
            <Parameters>
              <Parameter id="set_filled" name="SetFilled" descr="Specifies whether to set the filled property of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="filled" name="Filled" descr="Specifies whether the shape is filled or not."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_color" name="SetFillColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetFillAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="FillAlpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the shape properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_14" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Arithmetic_1" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_7" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_8" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_9" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Delay_2" catalog="kernel" class_id="delay">
            <Parameters>
              <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output datatype (delayed)">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - int_4" catalog="kernel" class_id="scalar_arith_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_10" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_11" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_5" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_12" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Arithmetic_14" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Queue_1" catalog="kernel" class_id="queue">
            <Parameters>
              <Parameter id="length" name="Length" descr="Specifies the length of the queue (steps after wich the input is propagated)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="flush" name="Flush" descr="Empties the queue" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="incomplete_queue_behaviour" name="Incomplete queue behaviour"
                         descr="Determines the behaviour of the block when the queue is not yet full.&#13;&#10; - 'No output' means that nothing is given on output&#13;&#10; - 'Default value' means that an output is generated, and its value is the default datatype value (e.g., black for images, 0 for integer and doubles, etc)&#13;&#10; - 'Reset value' means that an output is generated, and its value is the value of the input when the queue was reset or its size was changed. Note that the input is overwritten by the block (i.e., it is similar to an inplace block), so the value might not be the one you expect (e.g., the one you see in displays). For this reason, using this mode is deprecated, and it is provided only for preserving compatibility with existing patches&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No output</Label>
                  <Label>Default value</Label>
                  <Label>Reset value</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is equal to the N-steps-before input.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output after &quot;Lenght&quot; parameter steps.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*SkipvideoActive" catalog="kernel" class_id="comparison_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Less Than (&lt;)</Label>
                  <Label>Less Than or Equal To (&lt;=);Equal To (=);Different From (!= or &lt;&gt;)</Label>
                  <Label>Greater Than (&gt;)</Label>
                  <Label>Greater Than or Equal To (&gt;=)</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Value" descr="Value to compare with the input pin."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Result of comparison operation.">
                <Datatype type="1"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input before comparing datatype.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Restart" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Delay_3" catalog="kernel" class_id="delay">
            <Parameters>
              <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output datatype (delayed)">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*Comment" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_8" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Size2DGenerator_1" catalog="base" class_id="point_2d_generator">
            <Parameters>
              <Parameter id="height" name="integer_height" descr="It specifies integer height value of size datatype."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="width" name="integer_width" descr="It specifies integer width value of size datatype."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="*MF1" catalog="kernel" class_id="int_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*alphaBackgroundParam" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*alphaForegroundParam" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*alphaBackgroundParam2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*alphaForegroundParam2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*LoadConfig" catalog="kernel" class_id="comparison_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Less Than (&lt;)</Label>
                  <Label>Less Than or Equal To (&lt;=);Equal To (=);Different From (!= or &lt;&gt;)</Label>
                  <Label>Greater Than (&gt;)</Label>
                  <Label>Greater Than or Equal To (&gt;=)</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Value" descr="Value to compare with the input pin."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Result of comparison operation.">
                <Datatype type="1"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input before comparing datatype.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_13" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_23" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_24" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_7" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Size2DGenerator_2" catalog="base" class_id="point_2d_generator">
            <Parameters>
              <Parameter id="height" name="integer_height" descr="It specifies integer height value of size datatype."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="width" name="integer_width" descr="It specifies integer width value of size datatype."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="*MF2" catalog="kernel" class_id="int_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
        </Blocks>
        <SubpatchParamPins/>
        <SubpatchOutputPins/>
        <SubpatchInputPins/>
      </PatchOutline>
      <EywSheetBindSheetVisible patch="" label="" id=""/>
    </Sheet>
    <Sheet title="Optical Flow" bgnd_colour="ffa7b2b2" SheetPatch="VideoTrackerTool">
      <SheetItems>
        <SheetItem type="3003" tooltip_text="" rectangle="64 56 457 377">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="*OF1" id="Output"/>
        </SheetItem>
        <SheetItem type="3003" tooltip_text="" rectangle="552 56 457 377">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="3" patch="VideoTrackerTool" label="*OF2" id="Output"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="240 24 103 30" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>RO1 1<Font name="Arial" size="29.700000762939453" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="736 24 103 30" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>RO1 2<Font name="Arial" size="29.700000762939453" style="0"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="64 488 457 33" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="bbffffff"
                   min_val="1" max_val="30" step="1" skew_factor="1" unit_name=""
                   text_pos="1" text_width="60" text_height="20" text_editable="1"
                   text_bgnd_colour="ffffffff" text_txt_colour="ff000000" text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*OFPL1" id="value"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="552 488 449 33" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="bbffffff"
                   min_val="1" max_val="30" step="1" skew_factor="1" unit_name=""
                   text_pos="1" text_width="60" text_height="20" text_editable="1"
                   text_bgnd_colour="ffffffff" text_txt_colour="ff000000" text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*OFPL2" id="value"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="64 552 457 33" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="bbffffff"
                   min_val="1" max_val="30" step="1" skew_factor="1" unit_name=""
                   text_pos="1" text_width="60" text_height="20" text_editable="1"
                   text_bgnd_colour="ffffffff" text_txt_colour="ff000000" text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*OFPLK1" id="value"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="552 552 449 33" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="bbffffff"
                   min_val="1" max_val="30" step="1" skew_factor="1" unit_name=""
                   text_pos="1" text_width="60" text_height="20" text_editable="1"
                   text_bgnd_colour="ffffffff" text_txt_colour="ff000000" text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*OFPLK2" id="value"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="64 616 457 33" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="bbffffff"
                   min_val="1" max_val="10" step="1" skew_factor="1" unit_name=""
                   text_pos="1" text_width="60" text_height="20" text_editable="1"
                   text_bgnd_colour="ffffffff" text_txt_colour="ff000000" text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*OFITN1" id="value"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="552 616 449 33" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="ff1a1212"
                   min_val="1" max_val="10" step="1" skew_factor="1" unit_name=""
                   text_pos="1" text_width="60" text_height="20" text_editable="1"
                   text_bgnd_colour="ffffffff" text_txt_colour="ff000000" text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*OFITN2" id="value"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="304 592 473 17" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>NUMBER OF ITERATIONS<Font name="Cambria" size="22.100000381469727" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="304 528 473 25" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>AVERAGING WINDOWS SIZE<Font name="Cambria" size="22.100000381469727" style="0"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="296 464 473 25" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>PYRAMID LAYERS<Font name="Cambria" size="22.100000381469727" style="0"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="64 680 457 33" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="bbffffff"
                   min_val="1" max_val="30" step="1" skew_factor="1" unit_name=""
                   text_pos="1" text_width="60" text_height="20" text_editable="1"
                   text_bgnd_colour="ffffffff" text_txt_colour="ff000000" text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*OFNHG1" id="value"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="552 680 449 33" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="ff1a1212"
                   min_val="1" max_val="30" step="1" skew_factor="1" unit_name=""
                   text_pos="1" text_width="60" text_height="20" text_editable="1"
                   text_bgnd_colour="ffffffff" text_txt_colour="ff000000" text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*OFNHG2" id="value"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="304 656 473 17" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>PIXEL NEIGHBORHOOD SIZE<Font name="Cambria" size="22.100000381469727" style="0"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="64 744 457 33" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="bbffffff"
                   min_val="0.10000000000000001" max_val="5" step="0.10000000000000001"
                   skew_factor="1" unit_name="" text_pos="1" text_width="60" text_height="20"
                   text_editable="1" text_bgnd_colour="ffffffff" text_txt_colour="ff000000"
                   text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*OFPSF1" id="value"/>
        </SheetItem>
        <SheetItem type="2000" tooltip_text="" rectangle="552 744 449 33" style="2"
                   bgnd_colour="ffd3d3d3" thumb_colour="ffddddff" track_colour="ff1a1212"
                   min_val="0.10000000000000001" max_val="5" step="0.10000000000000001"
                   skew_factor="1" unit_name="" text_pos="1" text_width="60" text_height="20"
                   text_editable="1" text_bgnd_colour="ffffffff" text_txt_colour="ff000000"
                   text_outline_colour="ff000000">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>
          <EywItemLink type="1" patch="VideoTrackerTool" label="*OFPSF2" id="value"/>
        </SheetItem>
        <SheetItem type="1003" tooltip_text="" rectangle="304 720 473 17" colour="ff000000"
                   justification="36">
          <EywItemBindenabled patch="" label="" id="True"/>
          <EywItemBindvisible patch="" label="" id="True"/>PYRAMIAL SCALING FACTOR<Font name="Cambria" size="22.100000381469727" style="0"/>
        </SheetItem>
      </SheetItems>
      <ConnectionParams host="localhost" port="7834"/>
      <PatchOutline imported_patch="VideoTrackerTool">
        <Blocks>
          <Block label="DisplayGDI-Interact_1" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_1" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_12" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConcatenateStrings_2" catalog="base" class_id="concatenate_strings">
            <Parameters/>
            <Outputs>
              <Output id="output" name="Output string" descr="The concatenation of the input strings">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_3" name="Input string 3" descr="The input string 3 wil be placed at position 3 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_4" name="Input string 4" descr="The input string 4 wil be placed at position 4 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_5" name="Input string 5" descr="The input string 5 wil be placed at position 5 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_3" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConcatenateStrings_3" catalog="base" class_id="concatenate_strings">
            <Parameters/>
            <Outputs>
              <Output id="output" name="Output string" descr="The concatenation of the input strings">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="_ResultFolder" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_RoiFile" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_1" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringDisplay_2" catalog="system" class_id="string_display">
            <Parameters>
              <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Near (left);Center</Label>
                  <Label>Far (right)</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="string" name="Input string" descr="Input string to display.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_1" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="1">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="1">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_1" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_1" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*FD1" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_5" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_3" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_5" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_2" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - int_3" catalog="kernel" class_id="scalar_arith_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OutputSelector_1" catalog="kernel" class_id="output_selector">
            <Parameters>
              <Parameter id="active_output" name="Active output" descr="Zero-based index of the active output. The selected output is activated."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_1" name="Output 1" descr="0 output of the block.">
                <Datatype type="0"/>
              </Output>
              <Output id="output_2" name="Output 2" descr="1 output of the block.">
                <Datatype type="0"/>
              </Output>
              <Output id="output_3" name="Output 3" descr="2 output of the block.">
                <Datatype type="0"/>
              </Output>
              <Output id="output_4" name="Output 4" descr="3 output of the block.">
                <Datatype type="0"/>
              </Output>
              <Output id="output_5" name="Output 5" descr="4 output of the block.">
                <Datatype type="0"/>
              </Output>
              <Output id="output_6" name="Output 6" descr="5 output of the block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input of the selector. The input is propagated to the choosen output.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_2" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_7" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_8" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_9" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_2" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_3" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_4" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetROI_5" catalog="base" class_id="image_set_roi">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Output image" descr="Output image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input image" descr="Input image">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_2" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_2" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="1">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="1">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_2" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_2" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*FD2" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_2" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_4" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_3" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_3" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_3" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageMedianFilter_3" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_3" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_5" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_4" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_4" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_4" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageMedianFilter_4" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_4" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_6" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_5" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_5" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_5" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageMedianFilter_5" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_6" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_7" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="PFinder_6" catalog="base" class_id="pfinder">
            <Parameters>
              <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="adaptive_background_model" name="Adaptive background model"
                         descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                         descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Blind update</Label>
                  <Label>Background;BackgroundAndForeground</Label>
                </Layout>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
              <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output foreground image stream">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageConverter_6" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_6" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ImageMedianFilter_6" catalog="base" class_id="image_median_filter">
            <Parameters/>
            <Outputs>
              <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_7" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_2" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_3" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_5" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_4" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_6" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarValueVsSampleDisplay_7" catalog="system" class_id="scalar_value_vs_sample_graph_display">
            <Parameters>
              <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;2;0;0</Domain>
              </Parameter>
              <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>Scrolling;Wrap Around</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                         descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                         descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>No Legend</Label>
                  <Label>Left</Label>
                  <Label>Right</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                         descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                         descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>LeftToRight</Label>
                  <Label>RightToLeft</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                         descr="Set the x axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Top</Label>
                  <Label>Bottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                         descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                         descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Fixed</Label>
                  <Label>AutoScale</Label>
                  <Label>AutoScaleInc</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>TopDown</Label>
                  <Label>BottomUp</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                         descr="Set the y axis tick labels position around the plot area"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>No Label</Label>
                  <Label>Right</Label>
                  <Label>Left</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                         descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                         descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Null</Label>
                  <Label>Solid</Label>
                  <Label>Dash</Label>
                  <Label>Dot</Label>
                  <Label>DashDot</Label>
                  <Label>DashDotDot</Label>
                </Layout>
              </Parameter>
              <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_8" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_3" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_9" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_4" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_10" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_5" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_11" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_6" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_12" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_7" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_13" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_7" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarDisplay_9" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_10" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_12" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_13" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_1" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringDisplay_7" catalog="system" class_id="string_display">
            <Parameters>
              <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Near (left);Center</Label>
                  <Label>Far (right)</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="string" name="Input string" descr="Input string to display.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_2" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_14" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_15" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_16" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_17" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_18" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_19" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_4" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_5" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_6" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_13" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_14" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_15" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_16" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_17" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_18" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_2" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_5" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="StringToInt_2" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_3" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_4" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_5" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_6" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_7" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_8" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_9" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_10" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_3" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_4" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_6" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_6" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_22" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_65" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_23" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_24" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_66" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_25" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_67" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_26" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_27" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_68" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_85" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_77" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_86" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_87" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_78" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_79" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_7" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_8" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_9" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_10" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_11" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_12" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_11" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_12" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_13" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_14" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_15" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_16" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_4" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_2" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_5" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_3" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_19" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_17" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_20" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_21" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_18" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_28" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_29" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_19" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_20" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_30" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_31" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_21" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_22" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_7" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_7" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_32" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_23" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_33" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_24" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_34" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_35" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_36" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_37" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_38" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_39" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_25" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_26" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_27" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_28" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_29" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_30" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_8" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_8" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_9" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_9" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_40" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_31" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_41" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_42" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_32" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_43" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_44" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_33" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_34" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_45" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_46" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_35" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_36" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_10" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_10" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_47" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_37" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_48" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_38" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_49" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_50" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_39" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_40" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_11" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_11" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_51" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_41" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_52" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_42" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_53" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_54" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_55" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_56" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_57" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_58" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_43" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_44" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_45" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_46" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_47" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_48" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_12" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_12" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_13" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_13" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_59" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_49" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_60" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_61" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_50" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_62" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_63" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_51" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_52" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_64" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_65" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_53" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_54" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_14" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_14" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_66" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_55" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_67" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_56" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_68" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_69" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_57" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_58" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_15" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_15" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_70" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_59" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_71" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_60" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_72" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_73" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_61" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_62" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_16" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_16" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_74" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_63" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_75" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_64" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_76" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_77" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_78" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_79" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_80" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_81" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_69" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_70" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_71" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_72" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_73" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_74" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_17" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_17" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="Point2DGenerator_18" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_18" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_82" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_75" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_83" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_84" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_76" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_88" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_89" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_80" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_81" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_90" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_91" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_82" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_83" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_19" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_19" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_92" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_84" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_93" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_85" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_94" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_95" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_86" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_87" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_20" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_20" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_96" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_88" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_97" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_89" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_98" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_99" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_90" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_91" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_21" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_21" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_100" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_92" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_101" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_93" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_102" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_103" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_94" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_95" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_22" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="PointToRoi_22" catalog="base" class_id="pointtoroi">
            <Parameters>
              <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Top Left</Label>
                  <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
                  <Label>Middle Right</Label>
                  <Label>Bottom Left</Label>
                  <Label>Bottom Center;Bottom Right</Label>
                </Layout>
              </Parameter>
              <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="ListExtract_104" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_96" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_105" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringToInt_97" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_1" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ComputeFPS_1" catalog="base" class_id="compute_fps">
            <Parameters>
              <Parameter id="selector" name="Selector" descr="Each datatype has more than one timestamp attached to itself. This parameter specifies which one to use when computing FPS"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Creation Time;Presentation Time</Label>
                  <Label>Media Time</Label>
                </Layout>
              </Parameter>
              <Parameter id="window_size" name="Window size" descr="To obtain a reliable measure, an average is performed on the last measured samples. This parameter specifies the size of the window. A size of one means that no average is performed."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="rese" name="Reset" descr="Reset the current window storing the last 'window size' timestamps"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="FPS" descr="Computed Frames Per Second">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input datatype whom framerate is going to be computed">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MediafileReader_1" catalog="base" class_id="media_file_reader_new">
            <Parameters>
              <Parameter id="media_filename" name="Filename" descr="Filepath of media file. An empty filename is allowed; the corresponding video output is black, the corresponding audio output is silence"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="out_of_bound_management" name="End of file mode" descr="Describes the behaviour of the reader when an end of file is reached:&#13;&#10; - Loop: playback restart from the beginning of the file&#13;&#10; - Keep last frame: the last frame is repeaed indefinitely&#13;&#10; - Black/silence: a black frame is generated as output (sound is set to silence)&#13;&#10; - No output: no output is given"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>Loop</Label>
                  <Label>Keep last frame;Black/silence;No output</Label>
                </Layout>
              </Parameter>
              <Parameter id="play" name="Play" descr="Start/resume playing file" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="pause" name="Pause" descr="Start/resume playing file" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="goto_start" name="Go To Start" descr="Go back to start of file"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="video_output" name="Output video" descr="Output video">
                <Datatype type="6"/>
              </Output>
              <Output id="audio_output" name="Output Audio" descr="Output audio">
                <Datatype type="9"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="frame" name="Frame index" descr="Frame index">
                <Datatype type="4"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="NoInputToTrigger_1" catalog="base" class_id="NoInputToTrigger">
            <Parameters>
              <Parameter id="repeat" name="Repeat" descr="A trigger is generated when the time interval specified by the Delay parameter is elapsed. If the same time interval passes again and input is still not received the block repeats the generation of a trigger or not depending on the value of this parameter."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Trigger" descr="A trigger is generated if a fixed delay has elapsed since receiving the last input. The trigger can be only one or can repeat depending on the Repeat parameter.">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Generic input" descr="You can connect any kind of output to this input pin. If no input is received after a fixed time (specified in the Delay parameter) is elapsed a trigger is generated.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_3" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_6" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="TokenizeString_1" catalog="base" class_id="tokenize_string">
            <Parameters>
              <Parameter id="separator_string" name="Separator" descr="Character that separate InputString into substrings."
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="newline_as_separator" name="Is NewLine Separator" descr="Whether the newline character is included in the separators."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="tab_as_separator" name="Is Tab Separator" descr="Whether the tab character is included in the separators."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_string" name="InputString" descr="String that will be tokenized.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ReadStringFromfile_1" catalog="base" class_id="read_string_from_file">
            <Parameters>
              <Parameter id="par_file_name" name="FileName" descr="Text file name." exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="par_reload" name="Reload" descr="Reloads file and generates againg the output."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_string" name="OutString" descr="Output string from file.">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ListExtract_1" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - int_1" catalog="kernel" class_id="scalar_arith_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_1" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - int_2" catalog="kernel" class_id="scalar_arith_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_1" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_2" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringDisplay_5" catalog="system" class_id="string_display">
            <Parameters>
              <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Near (left);Center</Label>
                  <Label>Far (right)</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="string" name="Input string" descr="Input string to display.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ReplaceString_1" catalog="base" class_id="replace_string">
            <Parameters>
              <Parameter id="find" name="SubstringToReplace" descr="Find this substring inside the input string and replace it."
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="replace_with" name="ReplaceWith" descr="Replace the SubstringToReplace parameter with this substring."
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="replace_mode" name="ReplaceMode" descr="It is possible to replace alle the occurrences of the substring or just the first one."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>AllOccurences;FirstOccurence</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_string" name="ReplacedString" descr="Replaced string.">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_string" name="InputString" descr="Input string that must be replaced.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_1" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ListExtract_3" catalog="base" class_id="list_extract">
            <Parameters>
              <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;0;0;0</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Index" descr="Extracted generic output value">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Counter_1" catalog="base" class_id="Counter">
            <Parameters>
              <Parameter id="Step" name="Step" descr="Step Description" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Begin" name="Begin" descr="Begin Description" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="End" name="End" descr="End Description" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="CustomReset" name="Custom reset value" descr="When the counter is reset, and the reset mode is set to custom value, this value is used."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Start" name="Start" descr="Start Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Stop" name="Stop" descr="Stop Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Reset" name="Reset" descr="Reset Description" exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="ResetMode" name="Reset mode" descr="Specifies the behaviour when the counter is reset. The counter can reset to the initial value (Begin) or to a custom value."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Begin</Label>
                  <Label>Custom value</Label>
                </Layout>
              </Parameter>
              <Parameter id="TypeCounter" name="Bounding mode" descr="Specifies whether the counter is bounded (stops counting after a given bound is reached), unbounded (counts forever) or circular (restart from the beginning after a given bound is reached)."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Unbounded counter;Bounded counter</Label>
                  <Label>Circular counter</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output" descr="Output Description">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input Descrption">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetFilePathComponent_3" catalog="base" class_id="GetFilePathComponent">
            <Parameters>
              <Parameter id="ComponentType" name="Component type" descr="Used to set the type of component to be extracted"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>File Name or Folder Name</Label>
                  <Label>Path</Label>
                  <Label>File Stem (Filename Without Extension)</Label>
                  <Label>File Extension</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="OutputComponent" name="File Name" descr="The extracted file name">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputPath" name="Input File Path" descr="The input file path">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Counter_6" catalog="base" class_id="Counter">
            <Parameters>
              <Parameter id="Step" name="Step" descr="Step Description" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Begin" name="Begin" descr="Begin Description" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="End" name="End" descr="End Description" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="CustomReset" name="Custom reset value" descr="When the counter is reset, and the reset mode is set to custom value, this value is used."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Start" name="Start" descr="Start Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Stop" name="Stop" descr="Stop Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Reset" name="Reset" descr="Reset Description" exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="ResetMode" name="Reset mode" descr="Specifies the behaviour when the counter is reset. The counter can reset to the initial value (Begin) or to a custom value."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Begin</Label>
                  <Label>Custom value</Label>
                </Layout>
              </Parameter>
              <Parameter id="TypeCounter" name="Bounding mode" descr="Specifies whether the counter is bounded (stops counting after a given bound is reached), unbounded (counts forever) or circular (restart from the beginning after a given bound is reached)."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Unbounded counter;Bounded counter</Label>
                  <Label>Circular counter</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output" descr="Output Description">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input Descrption">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ContainerSize_1" catalog="base" class_id="container_size">
            <Parameters/>
            <Outputs>
              <Output id="output" name="Output" descr="Size of the input container">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This is the container which size will be estracted by the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="CompareWithValue - int_1" catalog="kernel" class_id="comparison_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Less Than (&lt;)</Label>
                  <Label>Less Than or Equal To (&lt;=);Equal To (=);Different From (!= or &lt;&gt;)</Label>
                  <Label>Greater Than (&gt;)</Label>
                  <Label>Greater Than or Equal To (&gt;=)</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Value" descr="Value to compare with the input pin."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Result of comparison operation.">
                <Datatype type="1"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input before comparing datatype.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BooleanToTrigger_1" catalog="base" class_id="bool_to_trigger">
            <Parameters>
              <Parameter id="mode" name="Mode" descr="Specifies when to generate the output trigger. "
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>False to true;True to false</Label>
                  <Label>Any change</Label>
                  <Label>True;False</Label>
                </Layout>
              </Parameter>
              <Parameter id="initial_state" name="Initial state" descr="This value is used only at first signal change detection to initialize the previous signal state."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Indeterminate;True</Label>
                  <Label>False</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output trigger datatype.">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input boolean datatype. The block generates a trigger as output according to the value of this datatype.">
                <Datatype type="1"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringDisplay_6" catalog="system" class_id="string_display">
            <Parameters>
              <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Near (left);Center</Label>
                  <Label>Far (right)</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="string" name="Input string" descr="Input string to display.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringToInt_98" catalog="base" class_id="string_to_int">
            <Parameters/>
            <Outputs>
              <Output id="output" name="OutputInt" descr="The integer number">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_4" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_6" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringDisplay_8" catalog="system" class_id="string_display">
            <Parameters>
              <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Near (left);Center</Label>
                  <Label>Far (right)</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="string" name="Input string" descr="Input string to display.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_2" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="TokenizeString_2" catalog="base" class_id="tokenize_string">
            <Parameters>
              <Parameter id="separator_string" name="Separator" descr="Character that separate InputString into substrings."
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="newline_as_separator" name="Is NewLine Separator" descr="Whether the newline character is included in the separators."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="tab_as_separator" name="Is Tab Separator" descr="Whether the tab character is included in the separators."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_string" name="InputString" descr="String that will be tokenized.">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_3" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Delay_1" catalog="kernel" class_id="delay">
            <Parameters>
              <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output datatype (delayed)">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_14" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_15" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_4" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Switch_16" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_2" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_8" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="WriteToFile_8" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_17" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_9" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_18" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_10" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_19" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_11" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_20" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_12" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_09" name="Input09" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_10" name="Input10" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_21" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_13" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_09" name="Input09" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_10" name="Input10" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_11" name="Input11" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_12" name="Input12" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_22" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_2" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="1">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_7" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_8" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_23" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_1" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_2" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_2" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_3" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_4" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_6" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_9" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_4" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_5" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_1" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_3" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_1" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*OF1" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StartTracking" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_1" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_8" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_3" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_4" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_3" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="1">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="1">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_9" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_10" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_24" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_3" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_4" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_5" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_2" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_6" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_2" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_3" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_2" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_3" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_2" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_7" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_2" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*OF2" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_18" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_9" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_10" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_2" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_5" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_4" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_11" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_12" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_25" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_5" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_6" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_8" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_4" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_9" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_4" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_5" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_6" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_7" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_3" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_10" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_3" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DrawGraphicObject_4" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_19" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_11" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_12" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_6" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_7" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_5" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_13" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_14" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_26" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_7" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_8" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_11" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_5" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_12" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_7" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_8" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_8" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_9" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_4" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_13" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_4" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DrawGraphicObject_5" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_20" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_13" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_14" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_8" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_9" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_6" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_15" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_16" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_27" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_9" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_10" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_14" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_6" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_15" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_10" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_11" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_10" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_11" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_5" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_16" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_5" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DrawGraphicObject_6" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_21" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_15" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_16" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_10" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_11" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpticalFlow_7" catalog="base" class_id="image_optical_flow">
            <Parameters>
              <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;1;0;0</Domain>
              </Parameter>
              <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                         descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;0;0</Domain>
              </Parameter>
              <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                         exported="0">
                <Datatype type="5"/>
                <Domain type="1">1;0;1;1</Domain>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
                <Datatype type="6"/>
              </Output>
              <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_17" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetImageStatistics_18" catalog="base" class_id="image_statistics">
            <Parameters>
              <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;3</Domain>
              </Parameter>
              <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_min" name="Min" descr="Computed min value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_max" name="Max" descr="Computed max value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_mean" name="Mean" descr="Computed mean value">
                <Datatype type="5"/>
              </Output>
              <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
                <Datatype type="5"/>
              </Output>
              <Output id="output_sum" name="Sum" descr="Computed sum">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Point2DGenerator_28" catalog="base" class_id="point2d_generator">
            <Parameters>
              <Parameter id="x" name="X" descr="X value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="y" name="Y" descr="Y value" exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                         exported="0">
                <Datatype type="8"/>
              </Parameter>
              <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="MovingArithmetic_11" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="MovingArithmetic_12" catalog="kernel" class_id="moving_arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;1;6</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
                </Layout>
              </Parameter>
              <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;-1;0;0</Domain>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_17" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_7" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Snapshot_18" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_12" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Arithmetic_13" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_12" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="***TypeCast_13" catalog="base" class_id="ConversionLegacy">
            <Parameters/>
            <Outputs>
              <Output id="Output" name="Output" descr="Output">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input">
                <Datatype type="5"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Pixel CoM_6" catalog="base" class_id="image_baricenter">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input_0" name="input" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Snapshot_19" catalog="kernel" class_id="snapshot">
            <Parameters>
              <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input stored in the internal memory.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeStroke_6" catalog="base" class_id="set_stroke_properties_2d">
            <Parameters>
              <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DrawGraphicObject_7" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_22" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarArithmeticOperation - double_17" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - double_18" catalog="kernel"
                 class_id="scalar_arith_op_double">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="1">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_12" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Image conversion_13" catalog="base" class_id="image_converter">
            <Parameters>
              <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;16</Domain>
                <Layout type="0">
                  <Label>No letterbox;CenterMiddle</Label>
                  <Label>NoneTop</Label>
                  <Label>NoneMiddle</Label>
                  <Label>NoneBottom</Label>
                  <Label>LeftNone</Label>
                  <Label>LeftTop</Label>
                  <Label>LeftMiddle</Label>
                  <Label>LeftBottom</Label>
                  <Label>CenterNone;CenterTop</Label>
                  <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
                </Layout>
              </Parameter>
              <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Nearest Neighbor</Label>
                  <Label>Linear;Cubic</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output image" descr="Converted image">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input image" descr="Input image which needs to be converted">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_10" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_11" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConcatenateStrings_5" catalog="base" class_id="concatenate_strings">
            <Parameters/>
            <Outputs>
              <Output id="output" name="Output string" descr="The concatenation of the input strings">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_3" name="Input string 3" descr="The input string 3 wil be placed at position 3 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_4" name="Input string 4" descr="The input string 4 wil be placed at position 4 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_5" name="Input string 5" descr="The input string 5 wil be placed at position 5 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_11" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*KCF1" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*KCF2" catalog="base" class_id="DrawGraphicObject">
            <Parameters>
              <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>High quality</Label>
                  <Label>Medium quality</Label>
                  <Label>Low quality</Label>
                </Layout>
              </Parameter>
              <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                         descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
                <Datatype type="6"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
                <Datatype type="6"/>
              </Input>
              <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Shape2DInfo-int_1" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_1" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Shape2DInfo-int_2" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_8" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarDisplay_11" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_20" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_21" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_24" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Shape2DInfo-int_3" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_9" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Shape2DInfo-int_4" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_10" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Shape2DInfo-int_5" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_11" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Shape2DInfo-int_6" catalog="base" class_id="extract_blob2d_info_int">
            <Parameters/>
            <Outputs>
              <Output id="area" name="Area" descr="Area of the input shape">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Shape" descr="Input shape">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="GetPoint2DCoordinates_12" catalog="base" class_id="get_point2d_coordinates">
            <Parameters/>
            <Outputs>
              <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
              <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ScalarDisplay_25" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_26" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_27" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_28" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_29" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_30" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_31" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarDisplay_32" catalog="base" class_id="Display">
            <Parameters>
              <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="Input000" name="Input 0" descr="Input 0 of the block">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_14" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_23" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_15" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_24" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_16" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_25" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_17" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_26" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_18" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_09" name="Input09" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_10" name="Input10" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_27" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="WriteToFile_19" catalog="base" class_id="WriteToFile">
            <Parameters>
              <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Append</Label>
                  <Label>Overwrite</Label>
                </Layout>
              </Parameter>
              <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_00" name="Input00" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_01" name="Input01" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_02" name="Input02" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_03" name="Input03" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_04" name="Input04" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_05" name="Input05" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_06" name="Input06" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_07" name="Input07" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_08" name="Input08" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_09" name="Input09" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_10" name="Input10" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_11" name="Input11" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_12" name="Input12" descr="Input 00.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_28" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConcatenateStrings_6" catalog="base" class_id="concatenate_strings">
            <Parameters/>
            <Outputs>
              <Output id="output" name="Output string" descr="The concatenation of the input strings">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_3" name="Input string 3" descr="The input string 3 wil be placed at position 3 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_4" name="Input string 4" descr="The input string 4 wil be placed at position 4 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
              <Input id="input_5" name="Input string 5" descr="The input string 5 wil be placed at position 5 to build the output concatenated string">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_12" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="DisplayGDI-Interact_12" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="DisplayGDI-Interact_13" catalog="system" class_id="display_gdi">
            <Parameters>
              <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>ignore the presentation time</Label>
                  <Label>respect the presentation time</Label>
                </Layout>
              </Parameter>
              <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;4</Domain>
                <Layout type="0">
                  <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
                  <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs>
              <Input id="input_image" name="Image" descr="Image to display.">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_9" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_10" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_11" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Switch_29" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_30" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_31" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_12" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Switch_32" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_33" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_15" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Switch_40" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_39" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_41" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_42" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_49" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_50" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_51" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_52" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_53" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_54" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_7" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_36" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_44" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_2" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_3" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_4" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_5" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_2" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_3" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_4" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_5" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_2" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_34" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_3" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_35" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_4" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_37" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_5" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_38" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="OpenCV-Trackers_6" catalog="base" class_id="OpenCV-Trackers">
            <Parameters/>
            <Outputs/>
            <Inputs>
              <Input id="InputImage" name="Input Image" descr="input">
                <Datatype type="6"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Switch_43" catalog="kernel" class_id="switch">
            <Parameters>
              <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Opened</Label>
                  <Label>Closed</Label>
                </Layout>
              </Parameter>
              <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="open" name="Open" descr="Open the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="close" name="Close" descr="Close the switch." exported="1">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
              <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
              <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="FileStem" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="GetSpecialFolder_3" catalog="kernel" class_id="get_special_folder">
            <Parameters>
              <Parameter id="folder_type" name="Special Folder Type" descr="Specifies which type of folder to query.&#10; - KernelFolder: the folder where the EyesWeb kernel dll currently in use is located&#10; - PatchFolder: the folder where the currently running patch is located"
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>KernelFolder</Label>
                  <Label>PatchFolder</Label>
                </Layout>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous Output" descr="Specifies if the block has to output the folder continuously or not.&#10;"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="folder" name="Folder" descr="The queried folder">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_2" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_6" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_FeedBack" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_13" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_TrialActualNumber" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_TrialTotalNumber" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_fileFD" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_fileOF" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="_fileKCF" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_13" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_3" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_4" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_5" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_6" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="SetToNull" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_25" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_4" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_5" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_14" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="SpawnCommand_1" catalog="base" class_id="spawn_command">
            <Parameters>
              <Parameter id="allow_duplicates" name="Allow duplicates" descr="If set to true, dusplicates commands are executed. If set to false, only the first occurance is executed"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="handle_process" name="OutputHandle" descr="The handler of the process executed">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="command_string" name="InputCommand" descr="The command-line of the process to be executed">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="StringGenerator_22" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Close Gui" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="SetShapeFill_1" catalog="base" class_id="set_shape_properties_2d">
            <Parameters>
              <Parameter id="set_filled" name="SetFilled" descr="Specifies whether to set the filled property of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="filled" name="Filled" descr="Specifies whether the shape is filled or not."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_color" name="SetFillColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetFillAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="FillAlpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the shape properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="SetShapeFill_2" catalog="base" class_id="set_shape_properties_2d">
            <Parameters>
              <Parameter id="set_filled" name="SetFilled" descr="Specifies whether to set the filled property of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="filled" name="Filled" descr="Specifies whether the shape is filled or not."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_color" name="SetFillColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="set_alpha" name="SetFillAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="alpha" name="FillAlpha" descr="Specifies the alpha level of the graphical geometric datatype."
                         exported="0">
                <Datatype type="5"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the shape properties have been changed by this block.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BangGenerator_14" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Arithmetic_1" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_7" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_8" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Delay_2" catalog="kernel" class_id="delay">
            <Parameters>
              <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output datatype (delayed)">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ScalarArithmeticOperation - int_4" catalog="kernel" class_id="scalar_arith_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;9</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
                  <Label>Max</Label>
                  <Label>Min</Label>
                  <Label>Set value</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_10" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_11" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_5" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_12" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Arithmetic_14" catalog="kernel" class_id="arith_op">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;7</Domain>
                <Layout type="0">
                  <Label>Sum</Label>
                  <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
                <Datatype type="0"/>
              </Output>
              <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
              <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*Comment" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="StringGenerator_8" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Size2DGenerator_1" catalog="base" class_id="point_2d_generator">
            <Parameters>
              <Parameter id="height" name="integer_height" descr="It specifies integer height value of size datatype."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="width" name="integer_width" descr="It specifies integer width value of size datatype."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="*MF1" catalog="kernel" class_id="int_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*alphaBackgroundParam" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*alphaForegroundParam" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*alphaBackgroundParam2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*alphaForegroundParam2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*LoadConfig" catalog="kernel" class_id="comparison_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Less Than (&lt;)</Label>
                  <Label>Less Than or Equal To (&lt;=);Equal To (=);Different From (!= or &lt;&gt;)</Label>
                  <Label>Greater Than (&gt;)</Label>
                  <Label>Greater Than or Equal To (&gt;=)</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Value" descr="Value to compare with the input pin."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Result of comparison operation.">
                <Datatype type="1"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input before comparing datatype.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_13" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_23" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_24" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_7" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Size2DGenerator_2" catalog="base" class_id="point_2d_generator">
            <Parameters>
              <Parameter id="height" name="integer_height" descr="It specifies integer height value of size datatype."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="width" name="integer_width" descr="It specifies integer width value of size datatype."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs/>
            <Inputs/>
          </Block>
          <Block label="*MF2" catalog="kernel" class_id="int_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_9" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*LoadConfigVisible" catalog="kernel" class_id="comparison_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Less Than (&lt;)</Label>
                  <Label>Less Than or Equal To (&lt;=);Equal To (=);Different From (!= or &lt;&gt;)</Label>
                  <Label>Greater Than (&gt;)</Label>
                  <Label>Greater Than or Equal To (&gt;=)</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Value" descr="Value to compare with the input pin."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Result of comparison operation.">
                <Datatype type="1"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input before comparing datatype.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_14" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_15" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_16" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_16" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Restart" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Delay_3" catalog="kernel" class_id="delay">
            <Parameters>
              <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output datatype (delayed)">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Delay_4" catalog="kernel" class_id="delay">
            <Parameters>
              <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output datatype (delayed)">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="CompareWithString_1" catalog="base" class_id="compare_string">
            <Parameters>
              <Parameter id="compare_string" name="StringTemplate" descr="Template string for comparison. (use regular expression syntax in Perl syntax: http://www.boost.org/libs/regex/doc/syntax_perl.html#Perl). For example, .* pattern matches any number of characters, thus behaving similarly to the * pattern.So if you need to match objects with label starting with 'point' substring, you can write (point).* instead, if you need to match objects with label containing 'point' substring, you can write .*(point).* "
                         exported="0">
                <Datatype type="3"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output_comparison" name="CompareValue" descr="The output value is 1 if the strings match, 0 otherwise. ">
                <Datatype type="1"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input_string" name="InputString" descr="String to compare">
                <Datatype type="3"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="BooleanToTrigger_2" catalog="base" class_id="bool_to_trigger">
            <Parameters>
              <Parameter id="mode" name="Mode" descr="Specifies when to generate the output trigger. "
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;5</Domain>
                <Layout type="0">
                  <Label>False to true;True to false</Label>
                  <Label>Any change</Label>
                  <Label>True;False</Label>
                </Layout>
              </Parameter>
              <Parameter id="initial_state" name="Initial state" descr="This value is used only at first signal change detection to initialize the previous signal state."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Indeterminate;True</Label>
                  <Label>False</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output trigger datatype.">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input boolean datatype. The block generates a trigger as output according to the value of this datatype.">
                <Datatype type="1"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="Counter_2" catalog="base" class_id="Counter">
            <Parameters>
              <Parameter id="Step" name="Step" descr="Step Description" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Begin" name="Begin" descr="Begin Description" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="End" name="End" descr="End Description" exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="CustomReset" name="Custom reset value" descr="When the counter is reset, and the reset mode is set to custom value, this value is used."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="Start" name="Start" descr="Start Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Stop" name="Stop" descr="Stop Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="Reset" name="Reset" descr="Reset Description" exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="ResetMode" name="Reset mode" descr="Specifies the behaviour when the counter is reset. The counter can reset to the initial value (Begin) or to a custom value."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;2</Domain>
                <Layout type="0">
                  <Label>Begin</Label>
                  <Label>Custom value</Label>
                </Layout>
              </Parameter>
              <Parameter id="TypeCounter" name="Bounding mode" descr="Specifies whether the counter is bounded (stops counting after a given bound is reached), unbounded (counts forever) or circular (restart from the beginning after a given bound is reached)."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;3</Domain>
                <Layout type="0">
                  <Label>Unbounded counter;Bounded counter</Label>
                  <Label>Circular counter</Label>
                </Layout>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="Output" name="Output" descr="Output Description">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="Input" name="Input" descr="Input Descrption">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*StartIsPressed" catalog="kernel" class_id="comparison_op_int">
            <Parameters>
              <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                         exported="0">
                <Datatype type="4"/>
                <Domain type="0">1;0;2;6</Domain>
                <Layout type="0">
                  <Label>Less Than (&lt;)</Label>
                  <Label>Less Than or Equal To (&lt;=);Equal To (=);Different From (!= or &lt;&gt;)</Label>
                  <Label>Greater Than (&gt;)</Label>
                  <Label>Greater Than or Equal To (&gt;=)</Label>
                </Layout>
              </Parameter>
              <Parameter id="scalar_value" name="Value" descr="Value to compare with the input pin."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Result of comparison operation.">
                <Datatype type="1"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input before comparing datatype.">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="ConstantGenerator - int_17" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_18" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="1">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_19" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_17" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="DoubleGenerator_2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="DoubleGenerator_3" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*OFPL1" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*OFPLK1" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*OFPL2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*OFPLK2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*OFITN1" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*OFITN2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*FrameInitString" catalog="kernel" class_id="string_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                         exported="1">
                <Datatype type="3"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="3"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="BangGenerator_23" catalog="kernel" class_id="bang_generator">
            <Parameters>
              <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
              <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
              <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="bang" name="Bang" descr="Bang">
                <Datatype type="2"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="ConstantGenerator - int_20" catalog="kernel" class_id="int_const_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Input value of the constant."
                         exported="0">
                <Datatype type="4"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output Value" descr="Output Value of the constant.">
                <Datatype type="4"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="Delay_5" catalog="kernel" class_id="delay">
            <Parameters>
              <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                         exported="0">
                <Datatype type="2"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Output" descr="Output datatype (delayed)">
                <Datatype type="0"/>
              </Output>
            </Outputs>
            <Inputs>
              <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
                <Datatype type="0"/>
              </Input>
            </Inputs>
          </Block>
          <Block label="*OFNHG2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*OFNHG1" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*OFPSF1" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
          <Block label="*OFPSF2" catalog="kernel" class_id="double_generator">
            <Parameters>
              <Parameter id="value" name="Value" descr="Value" exported="0">
                <Datatype type="5"/>
              </Parameter>
              <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                         exported="0">
                <Datatype type="1"/>
              </Parameter>
            </Parameters>
            <Outputs>
              <Output id="output" name="Value" descr="Value">
                <Datatype type="5"/>
              </Output>
            </Outputs>
            <Inputs/>
          </Block>
        </Blocks>
        <SubpatchParamPins/>
        <SubpatchOutputPins/>
        <SubpatchInputPins/>
      </PatchOutline>
      <EywSheetBindSheetVisible patch="" label="" id=""/>
    </Sheet>
  </Sheets>
  <PatchOutline imported_patch="VideoTrackerTool">
    <Blocks>
      <Block label="DisplayGDI-Interact_1" catalog="system" class_id="display_gdi">
        <Parameters>
          <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>ignore the presentation time</Label>
              <Label>respect the presentation time</Label>
            </Layout>
          </Parameter>
          <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;4</Domain>
            <Layout type="0">
              <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
              <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_image" name="Image" descr="Image to display.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="SetROI_1" catalog="base" class_id="image_set_roi">
        <Parameters/>
        <Outputs>
          <Output id="output_video_stream" name="Output image" descr="Output image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input image" descr="Input image">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="SetROI_12" catalog="base" class_id="image_set_roi">
        <Parameters/>
        <Outputs>
          <Output id="output_video_stream" name="Output image" descr="Output image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input image" descr="Input image">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ConcatenateStrings_2" catalog="base" class_id="concatenate_strings">
        <Parameters/>
        <Outputs>
          <Output id="output" name="Output string" descr="The concatenation of the input strings">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
          <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
          <Input id="input_3" name="Input string 3" descr="The input string 3 wil be placed at position 3 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
          <Input id="input_4" name="Input string 4" descr="The input string 4 wil be placed at position 4 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
          <Input id="input_5" name="Input string 5" descr="The input string 5 wil be placed at position 5 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringGenerator_3" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="_ResultFolder" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="_RoiFile" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="BangGenerator_1" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringDisplay_2" catalog="system" class_id="string_display">
        <Parameters>
          <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Near (left);Center</Label>
              <Label>Far (right)</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="string" name="Input string" descr="Input string to display.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="PFinder_1" catalog="base" class_id="pfinder">
        <Parameters>
          <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="adaptive_background_model" name="Adaptive background model"
                     descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                     descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Blind update</Label>
              <Label>Background;BackgroundAndForeground</Label>
            </Layout>
          </Parameter>
          <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                     exported="1">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
          <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                     exported="1">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
          <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Output foreground image stream">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ImageConverter_1" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_1" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="*FD1" catalog="base" class_id="image_median_filter">
        <Parameters/>
        <Outputs>
          <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarArithmeticOperation - double_5" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="DisplayGDI-Interact_3" catalog="system" class_id="display_gdi">
        <Parameters>
          <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>ignore the presentation time</Label>
              <Label>respect the presentation time</Label>
            </Layout>
          </Parameter>
          <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;4</Domain>
            <Layout type="0">
              <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
              <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_image" name="Image" descr="Image to display.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="DisplayGDI-Interact_5" catalog="system" class_id="display_gdi">
        <Parameters>
          <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>ignore the presentation time</Label>
              <Label>respect the presentation time</Label>
            </Layout>
          </Parameter>
          <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;4</Domain>
            <Layout type="0">
              <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
              <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_image" name="Image" descr="Image to display.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_2" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarArithmeticOperation - int_3" catalog="kernel" class_id="scalar_arith_op_int">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="OutputSelector_1" catalog="kernel" class_id="output_selector">
        <Parameters>
          <Parameter id="active_output" name="Active output" descr="Zero-based index of the active output. The selected output is activated."
                     exported="1">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_1" name="Output 1" descr="0 output of the block.">
            <Datatype type="0"/>
          </Output>
          <Output id="output_2" name="Output 2" descr="1 output of the block.">
            <Datatype type="0"/>
          </Output>
          <Output id="output_3" name="Output 3" descr="2 output of the block.">
            <Datatype type="0"/>
          </Output>
          <Output id="output_4" name="Output 4" descr="3 output of the block.">
            <Datatype type="0"/>
          </Output>
          <Output id="output_5" name="Output 5" descr="4 output of the block.">
            <Datatype type="0"/>
          </Output>
          <Output id="output_6" name="Output 6" descr="5 output of the block.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input of the selector. The input is propagated to the choosen output.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="DisplayGDI-Interact_2" catalog="system" class_id="display_gdi">
        <Parameters>
          <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>ignore the presentation time</Label>
              <Label>respect the presentation time</Label>
            </Layout>
          </Parameter>
          <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;4</Domain>
            <Layout type="0">
              <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
              <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_image" name="Image" descr="Image to display.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="DisplayGDI-Interact_7" catalog="system" class_id="display_gdi">
        <Parameters>
          <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>ignore the presentation time</Label>
              <Label>respect the presentation time</Label>
            </Layout>
          </Parameter>
          <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;4</Domain>
            <Layout type="0">
              <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
              <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_image" name="Image" descr="Image to display.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="DisplayGDI-Interact_8" catalog="system" class_id="display_gdi">
        <Parameters>
          <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>ignore the presentation time</Label>
              <Label>respect the presentation time</Label>
            </Layout>
          </Parameter>
          <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;4</Domain>
            <Layout type="0">
              <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
              <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_image" name="Image" descr="Image to display.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="DisplayGDI-Interact_9" catalog="system" class_id="display_gdi">
        <Parameters>
          <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>ignore the presentation time</Label>
              <Label>respect the presentation time</Label>
            </Layout>
          </Parameter>
          <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;4</Domain>
            <Layout type="0">
              <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
              <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_image" name="Image" descr="Image to display.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="SetROI_2" catalog="base" class_id="image_set_roi">
        <Parameters/>
        <Outputs>
          <Output id="output_video_stream" name="Output image" descr="Output image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input image" descr="Input image">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="SetROI_3" catalog="base" class_id="image_set_roi">
        <Parameters/>
        <Outputs>
          <Output id="output_video_stream" name="Output image" descr="Output image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input image" descr="Input image">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="SetROI_4" catalog="base" class_id="image_set_roi">
        <Parameters/>
        <Outputs>
          <Output id="output_video_stream" name="Output image" descr="Output image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input image" descr="Input image">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="SetROI_5" catalog="base" class_id="image_set_roi">
        <Parameters/>
        <Outputs>
          <Output id="output_video_stream" name="Output image" descr="Output image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input image" descr="Input image">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_2" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="PFinder_2" catalog="base" class_id="pfinder">
        <Parameters>
          <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="adaptive_background_model" name="Adaptive background model"
                     descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                     descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Blind update</Label>
              <Label>Background;BackgroundAndForeground</Label>
            </Layout>
          </Parameter>
          <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                     exported="1">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
          <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                     exported="1">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
          <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Output foreground image stream">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ImageConverter_2" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_2" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="*FD2" catalog="base" class_id="image_median_filter">
        <Parameters/>
        <Outputs>
          <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarArithmeticOperation - double_2" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_4" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="PFinder_3" catalog="base" class_id="pfinder">
        <Parameters>
          <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="adaptive_background_model" name="Adaptive background model"
                     descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                     descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Blind update</Label>
              <Label>Background;BackgroundAndForeground</Label>
            </Layout>
          </Parameter>
          <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
          <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
          <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Output foreground image stream">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ImageConverter_3" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_3" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ImageMedianFilter_3" catalog="base" class_id="image_median_filter">
        <Parameters/>
        <Outputs>
          <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarArithmeticOperation - double_3" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_5" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="PFinder_4" catalog="base" class_id="pfinder">
        <Parameters>
          <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="adaptive_background_model" name="Adaptive background model"
                     descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                     descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Blind update</Label>
              <Label>Background;BackgroundAndForeground</Label>
            </Layout>
          </Parameter>
          <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
          <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
          <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Output foreground image stream">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ImageConverter_4" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_4" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ImageMedianFilter_4" catalog="base" class_id="image_median_filter">
        <Parameters/>
        <Outputs>
          <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarArithmeticOperation - double_4" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_6" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="PFinder_5" catalog="base" class_id="pfinder">
        <Parameters>
          <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="adaptive_background_model" name="Adaptive background model"
                     descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                     descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Blind update</Label>
              <Label>Background;BackgroundAndForeground</Label>
            </Layout>
          </Parameter>
          <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
          <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
          <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Output foreground image stream">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ImageConverter_5" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_5" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ImageMedianFilter_5" catalog="base" class_id="image_median_filter">
        <Parameters/>
        <Outputs>
          <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarArithmeticOperation - double_6" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_7" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="PFinder_6" catalog="base" class_id="pfinder">
        <Parameters>
          <Parameter id="reset" name="Reset Background" descr="Reset the current background model"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="threshold" name="Threshold" descr="Specifies the multiplication to be applied to the stanrd deviation before being used as the distance threshold between the input image and the background model to classify a pixel as foreground or background"
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="adaptive_background_model" name="Adaptive background model"
                     descr="If true the background model (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background model is static."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="adaptive_background_variance" name="Adaptive background variance"
                     descr="If true the background variance (roughly, the mean background) is continuosly adapted according to the alpha parameter. If false, the background variance is static."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="update_mode" name="Update mode" descr="Specifies how the model is updated:&#13;&#10;Blind: update the entire model with the same speed (alpha)&#13;&#10;Background: only update pixels classified as background&#13;&#10;BackgroundAndForeground: update both background and forground with different speeds (alpha and alpha foregound)&#13;&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Blind update</Label>
              <Label>Background;BackgroundAndForeground</Label>
            </Layout>
          </Parameter>
          <Parameter id="alpha" name="Alpha" descr="Costant which determines the update speed of the internal background model (0.0, no update occurs; 1.0, the internal model is replaced by the input."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
          <Parameter id="alpha_foreground" name="Alpha Foreground" descr="Costant which determines the update speed of the internal background model for foreground pixels (0.0, no update occurs; 1.0, the internal model is replaced by the input. This value is used only if update mode is set to BackgroundAndForground; otherwise the Alpha parameter is used"
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
          <Parameter id="minimum_variance" name="Minimum variance" descr="The minimum value of the variance."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Output foreground image stream">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input image stream on which to perform background subtraction">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ImageConverter_6" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_6" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ImageMedianFilter_6" catalog="base" class_id="image_median_filter">
        <Parameters/>
        <Outputs>
          <Output id="output_video_stream" name="Image" descr="The image after the filtering. ">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Image" descr="The input image. The image model can be BW or BGR">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarArithmeticOperation - double_7" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarValueVsSampleDisplay_2" catalog="system" class_id="scalar_value_vs_sample_graph_display">
        <Parameters>
          <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;2;0;0</Domain>
          </Parameter>
          <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Fixed</Label>
              <Label>Scrolling;Wrap Around</Label>
            </Layout>
          </Parameter>
          <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                     descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                     descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;5</Domain>
            <Layout type="0">
              <Label>No Legend</Label>
              <Label>Left</Label>
              <Label>Right</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                     descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                     descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>LeftToRight</Label>
              <Label>RightToLeft</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                     descr="Set the x axis tick labels position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                     descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                     descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Fixed</Label>
              <Label>AutoScale</Label>
              <Label>AutoScaleInc</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>TopDown</Label>
              <Label>BottomUp</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Right</Label>
              <Label>Left</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                     descr="Set the y axis tick labels position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Right</Label>
              <Label>Left</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                     descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                     descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarValueVsSampleDisplay_3" catalog="system" class_id="scalar_value_vs_sample_graph_display">
        <Parameters>
          <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;2;0;0</Domain>
          </Parameter>
          <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Fixed</Label>
              <Label>Scrolling;Wrap Around</Label>
            </Layout>
          </Parameter>
          <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                     descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                     descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;5</Domain>
            <Layout type="0">
              <Label>No Legend</Label>
              <Label>Left</Label>
              <Label>Right</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                     descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                     descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>LeftToRight</Label>
              <Label>RightToLeft</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                     descr="Set the x axis tick labels position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                     descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                     descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Fixed</Label>
              <Label>AutoScale</Label>
              <Label>AutoScaleInc</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>TopDown</Label>
              <Label>BottomUp</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Right</Label>
              <Label>Left</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                     descr="Set the y axis tick labels position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Right</Label>
              <Label>Left</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                     descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                     descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarValueVsSampleDisplay_5" catalog="system" class_id="scalar_value_vs_sample_graph_display">
        <Parameters>
          <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;2;0;0</Domain>
          </Parameter>
          <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Fixed</Label>
              <Label>Scrolling;Wrap Around</Label>
            </Layout>
          </Parameter>
          <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                     descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                     descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;5</Domain>
            <Layout type="0">
              <Label>No Legend</Label>
              <Label>Left</Label>
              <Label>Right</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                     descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                     descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>LeftToRight</Label>
              <Label>RightToLeft</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                     descr="Set the x axis tick labels position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                     descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                     descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Fixed</Label>
              <Label>AutoScale</Label>
              <Label>AutoScaleInc</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>TopDown</Label>
              <Label>BottomUp</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Right</Label>
              <Label>Left</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                     descr="Set the y axis tick labels position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Right</Label>
              <Label>Left</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                     descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                     descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarValueVsSampleDisplay_4" catalog="system" class_id="scalar_value_vs_sample_graph_display">
        <Parameters>
          <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;2;0;0</Domain>
          </Parameter>
          <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Fixed</Label>
              <Label>Scrolling;Wrap Around</Label>
            </Layout>
          </Parameter>
          <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                     descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                     descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;5</Domain>
            <Layout type="0">
              <Label>No Legend</Label>
              <Label>Left</Label>
              <Label>Right</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                     descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                     descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>LeftToRight</Label>
              <Label>RightToLeft</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                     descr="Set the x axis tick labels position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                     descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                     descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Fixed</Label>
              <Label>AutoScale</Label>
              <Label>AutoScaleInc</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>TopDown</Label>
              <Label>BottomUp</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Right</Label>
              <Label>Left</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                     descr="Set the y axis tick labels position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Right</Label>
              <Label>Left</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                     descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                     descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarValueVsSampleDisplay_6" catalog="system" class_id="scalar_value_vs_sample_graph_display">
        <Parameters>
          <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;2;0;0</Domain>
          </Parameter>
          <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Fixed</Label>
              <Label>Scrolling;Wrap Around</Label>
            </Layout>
          </Parameter>
          <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                     descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                     descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;5</Domain>
            <Layout type="0">
              <Label>No Legend</Label>
              <Label>Left</Label>
              <Label>Right</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                     descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                     descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>LeftToRight</Label>
              <Label>RightToLeft</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                     descr="Set the x axis tick labels position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                     descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                     descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Fixed</Label>
              <Label>AutoScale</Label>
              <Label>AutoScaleInc</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>TopDown</Label>
              <Label>BottomUp</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Right</Label>
              <Label>Left</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                     descr="Set the y axis tick labels position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Right</Label>
              <Label>Left</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                     descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                     descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarValueVsSampleDisplay_7" catalog="system" class_id="scalar_value_vs_sample_graph_display">
        <Parameters>
          <Parameter id="double_buffering" name="Double Buffering" descr="Render the graph using a back buffer to avoid flickering, paying a slight performance cost"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="num_visible_samples" name="Visible samples" descr="Number of samples visible along the X axis"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;2;0;0</Domain>
          </Parameter>
          <Parameter id="num_invisible_samples" name="Invisible samples" descr="Number of invisible samples, used for autoscale"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="x_axis_mode" name="X axis mode" descr="Determine the data behaviour along the X axis:&#10;  - Fixed: the samples scroll but the grid is fixed&#10;  - Scrolling: the samples scroll along with the grid&#10;  - Wrap Around: the data wraps around, no scrolling at all"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Fixed</Label>
              <Label>Scrolling;Wrap Around</Label>
            </Layout>
          </Parameter>
          <Parameter id="wrap_marker_visible" name="Wrap Marker Visible" descr="When the x axis is in Wrap Around mode, show/hide the last sample marker"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="wrap_marker_line_style" name="Wrap Marker Line Style" descr="Control how the Wrap Marker line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="wrap_marker_line_thickness" name="Wrap Marker Line Thickness"
                     descr="Specifies the width of the Wrap Marker line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset graph, clearing plot data and setting axes to the initial state"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="plot_border_line_style" name="Plot Border Line Style" descr="Control how the Plot Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="plot_border_line_thickness" name="Plot Border Line Thickness"
                     descr="Specifies the width of the Plot Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="legend_pos" name="Legend Position" descr="Set the legend position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;5</Domain>
            <Layout type="0">
              <Label>No Legend</Label>
              <Label>Left</Label>
              <Label>Right</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="legend_border_line_style" name="Legend Border Line Style"
                     descr="Control how the Legend Border line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="legend_border_line_thickness" name="Legend Border Line Thickness"
                     descr="Specifies the width of the Legend Border line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="x_axis_orientation" name="X Axis Orientation" descr="Determine the the x axis orientation"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>LeftToRight</Label>
              <Label>RightToLeft</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_label" name="X Axis Label" descr="The label drawn near the X Axis, leave blank for no label"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="x_axis_label_pos" name="X Axis Label Position" descr="Set the x axis label position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_step" name="X Axis Tick Step" descr="The step for the x axis tick marks"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="x_axis_tick_labels_pos" name="X Axis Tick Labels Position"
                     descr="Set the x axis tick labels position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Top</Label>
              <Label>Bottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_line_line_style" name="X Axis Tick Line Line Style"
                     descr="Control how the X Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="x_axis_tick_line_line_thickness" name="X Axis Tick Line Line Thickness"
                     descr="Specifies the width of the X Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="y_axis_range_min" name="Y Axis Range Min" descr="The minimum value for the y axis"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_range_max" name="Y Axis Range Max" descr="The maximum value for the y axis"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_range_mode" name="Y Axis Range Mode" descr="Controls the y axis autoscale behaviour"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Fixed</Label>
              <Label>AutoScale</Label>
              <Label>AutoScaleInc</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_orientation" name="Y Axis Orientation" descr="Determine the the y axis orientation"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>TopDown</Label>
              <Label>BottomUp</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_label" name="Y Axis Label" descr="The label drawn near the Y Axis, leave blank for no label"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="y_axis_label_pos" name="Y Axis Label Position" descr="Set the y axis label position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Right</Label>
              <Label>Left</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_step" name="Y Axis Tick Step" descr="The step for the y axis tick marks"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="y_axis_tick_labels_pos" name="Y Axis Tick Labels Position"
                     descr="Set the y axis tick labels position around the plot area"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>No Label</Label>
              <Label>Right</Label>
              <Label>Left</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_line_line_style" name="Y Axis Tick Line Line Style"
                     descr="Control how the Y Axis Tick Line line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="y_axis_tick_line_line_thickness" name="Y Axis Tick Line Line Thickness"
                     descr="Specifies the width of the Y Axis Tick Line line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="plot_1_label" name="Plot 1 Label" descr="Plot 1 label" exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="plot_1_line_style" name="Plot 1 Line Style" descr="Control how the Plot 1 line will be painted:&#10; - Null: the line will not be painted&#10; - Solid: the line is solid&#10; - Dash: the line is dashed&#10; - Dot: the line is dotted&#10; - DashDot: the line has alternating dashes and dots&#10; - DashDotDot: the line has alternating dashes and double dots&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Null</Label>
              <Label>Solid</Label>
              <Label>Dash</Label>
              <Label>Dot</Label>
              <Label>DashDot</Label>
              <Label>DashDotDot</Label>
            </Layout>
          </Parameter>
          <Parameter id="plot_1_line_thickness" name="Plot 1 Line Thickness" descr="Specifies the width of the Plot 1 line, in logical units.&#10;NOTE: if the line thickness is &gt; 1 then the line will be solid (this is due to a Win32 GDI limitation)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="plot_1_no_autoscale" name="Plot 1 No Autoscale" descr="Determine if Plot 1 is excluded from autoscale or not"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="The scalar data of this input will be drawn in Plot 1">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_8" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_3" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_9" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_4" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_03" name="Input03" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_10" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_5" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_03" name="Input03" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_04" name="Input04" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_11" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_6" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_03" name="Input03" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_04" name="Input04" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_05" name="Input05" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_12" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_7" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_03" name="Input03" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_04" name="Input04" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_05" name="Input05" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_06" name="Input06" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_13" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringGenerator_7" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ScalarDisplay_9" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_10" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_12" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_13" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringGenerator_1" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringDisplay_7" catalog="system" class_id="string_display">
        <Parameters>
          <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Near (left);Center</Label>
              <Label>Far (right)</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="string" name="Input string" descr="Input string to display.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_2" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_14" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_15" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_16" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_17" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_18" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_19" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_4" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_5" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_6" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_13" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_14" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_15" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_16" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_17" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_18" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Point2DGenerator_2" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_5" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="StringToInt_2" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_3" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_4" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_5" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_6" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_7" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_8" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_9" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_10" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_3" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_4" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="Point2DGenerator_6" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_6" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="ListExtract_22" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_65" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_23" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_24" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_66" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_25" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_67" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_26" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_27" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_68" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_85" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_77" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_86" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_87" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_78" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_79" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_7" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_8" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_9" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_10" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_11" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_12" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_11" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_12" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_13" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_14" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_15" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_16" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_4" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_2" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="Point2DGenerator_5" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_3" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="ListExtract_19" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_17" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_20" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_21" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_18" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_28" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_29" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_19" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_20" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_30" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_31" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_21" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_22" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_7" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_7" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="ListExtract_32" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_23" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_33" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_24" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_34" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_35" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_36" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_37" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_38" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_39" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_25" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_26" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_27" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_28" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_29" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_30" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_8" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_8" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="Point2DGenerator_9" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_9" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="ListExtract_40" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_31" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_41" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_42" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_32" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_43" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_44" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_33" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_34" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_45" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_46" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_35" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_36" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_10" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_10" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="ListExtract_47" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_37" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_48" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_38" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_49" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_50" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_39" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_40" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_11" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_11" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="ListExtract_51" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_41" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_52" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_42" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_53" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_54" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_55" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_56" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_57" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_58" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_43" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_44" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_45" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_46" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_47" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_48" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_12" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_12" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="Point2DGenerator_13" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_13" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="ListExtract_59" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_49" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_60" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_61" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_50" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_62" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_63" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_51" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_52" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_64" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_65" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_53" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_54" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_14" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_14" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="ListExtract_66" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_55" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_67" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_56" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_68" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_69" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_57" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_58" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_15" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_15" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="ListExtract_70" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_59" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_71" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_60" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_72" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_73" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_61" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_62" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_16" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_16" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="ListExtract_74" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_63" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_75" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_64" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_76" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_77" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_78" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_79" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_80" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_81" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_69" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_70" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_71" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_72" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_73" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_74" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_17" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_17" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="Point2DGenerator_18" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_18" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="ListExtract_82" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_75" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_83" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_84" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_76" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_88" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_89" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_80" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_81" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_90" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_91" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_82" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_83" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_19" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_19" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="ListExtract_92" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_84" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_93" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_85" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_94" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_95" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_86" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_87" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_20" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_20" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="ListExtract_96" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_88" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_97" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_89" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_98" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_99" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_90" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_91" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_21" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_21" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="ListExtract_100" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_92" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_101" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_93" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_102" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_103" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_94" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_95" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_22" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="PointToRoi_22" catalog="base" class_id="pointtoroi">
        <Parameters>
          <Parameter id="roi_offset" name="ROI Offset" descr="Specify the position of the input point with respect to the generated output rectangle"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Top Left</Label>
              <Label>Top Center;Top Right;Middle Left;Middle Center</Label>
              <Label>Middle Right</Label>
              <Label>Bottom Left</Label>
              <Label>Bottom Center;Bottom Right</Label>
            </Layout>
          </Parameter>
          <Parameter id="null_roi" name="Null ROI" descr="If set to true, the NULL flag of the output ROI. Note that implementations of blocks may interpret a NULL ROI differently from an empty ROI. For instance, the image datatype inteprets a NULL ROI as a ROI covering the whole images, whereas an empty ROI (width or height set to zero) actually causes all pixels to be unaffected by the subsequent operations"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="size_x" name="Width" descr="Width of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="size_y" name="Height" descr="Height of the generated rectangle"
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="ListExtract_104" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_96" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_105" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringToInt_97" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_1" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ComputeFPS_1" catalog="base" class_id="compute_fps">
        <Parameters>
          <Parameter id="selector" name="Selector" descr="Each datatype has more than one timestamp attached to itself. This parameter specifies which one to use when computing FPS"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Creation Time;Presentation Time</Label>
              <Label>Media Time</Label>
            </Layout>
          </Parameter>
          <Parameter id="window_size" name="Window size" descr="To obtain a reliable measure, an average is performed on the last measured samples. This parameter specifies the size of the window. A size of one means that no average is performed."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="rese" name="Reset" descr="Reset the current window storing the last 'window size' timestamps"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="FPS" descr="Computed Frames Per Second">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input datatype whom framerate is going to be computed">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="MediafileReader_1" catalog="base" class_id="media_file_reader_new">
        <Parameters>
          <Parameter id="media_filename" name="Filename" descr="Filepath of media file. An empty filename is allowed; the corresponding video output is black, the corresponding audio output is silence"
                     exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="out_of_bound_management" name="End of file mode" descr="Describes the behaviour of the reader when an end of file is reached:&#13;&#10; - Loop: playback restart from the beginning of the file&#13;&#10; - Keep last frame: the last frame is repeaed indefinitely&#13;&#10; - Black/silence: a black frame is generated as output (sound is set to silence)&#13;&#10; - No output: no output is given"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;4</Domain>
            <Layout type="0">
              <Label>Loop</Label>
              <Label>Keep last frame;Black/silence;No output</Label>
            </Layout>
          </Parameter>
          <Parameter id="play" name="Play" descr="Start/resume playing file" exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="pause" name="Pause" descr="Start/resume playing file" exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="goto_start" name="Go To Start" descr="Go back to start of file"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="video_output" name="Output video" descr="Output video">
            <Datatype type="6"/>
          </Output>
          <Output id="audio_output" name="Output Audio" descr="Output audio">
            <Datatype type="9"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="frame" name="Frame index" descr="Frame index">
            <Datatype type="4"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="NoInputToTrigger_1" catalog="base" class_id="NoInputToTrigger">
        <Parameters>
          <Parameter id="repeat" name="Repeat" descr="A trigger is generated when the time interval specified by the Delay parameter is elapsed. If the same time interval passes again and input is still not received the block repeats the generation of a trigger or not depending on the value of this parameter."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Trigger" descr="A trigger is generated if a fixed delay has elapsed since receiving the last input. The trigger can be only one or can repeat depending on the Repeat parameter.">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Generic input" descr="You can connect any kind of output to this input pin. If no input is received after a fixed time (specified in the Delay parameter) is elapsed a trigger is generated.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_3" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="BangGenerator_6" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="TokenizeString_1" catalog="base" class_id="tokenize_string">
        <Parameters>
          <Parameter id="separator_string" name="Separator" descr="Character that separate InputString into substrings."
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="newline_as_separator" name="Is NewLine Separator" descr="Whether the newline character is included in the separators."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="tab_as_separator" name="Is Tab Separator" descr="Whether the tab character is included in the separators."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_string" name="InputString" descr="String that will be tokenized.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ReadStringFromfile_1" catalog="base" class_id="read_string_from_file">
        <Parameters>
          <Parameter id="par_file_name" name="FileName" descr="Text file name." exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="par_reload" name="Reload" descr="Reloads file and generates againg the output."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_string" name="OutString" descr="Output string from file.">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ListExtract_1" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ScalarArithmeticOperation - int_1" catalog="kernel" class_id="scalar_arith_op_int">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ConstantGenerator - int_1" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ScalarArithmeticOperation - int_2" catalog="kernel" class_id="scalar_arith_op_int">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_1" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_2" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="1">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringDisplay_5" catalog="system" class_id="string_display">
        <Parameters>
          <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Near (left);Center</Label>
              <Label>Far (right)</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="string" name="Input string" descr="Input string to display.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ReplaceString_1" catalog="base" class_id="replace_string">
        <Parameters>
          <Parameter id="find" name="SubstringToReplace" descr="Find this substring inside the input string and replace it."
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="replace_with" name="ReplaceWith" descr="Replace the SubstringToReplace parameter with this substring."
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="replace_mode" name="ReplaceMode" descr="It is possible to replace alle the occurrences of the substring or just the first one."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>AllOccurences;FirstOccurence</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_string" name="ReplacedString" descr="Replaced string.">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_string" name="InputString" descr="Input string that must be replaced.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_1" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ListExtract_3" catalog="base" class_id="list_extract">
        <Parameters>
          <Parameter id="index" name="Index" descr="Index of the item to be extracted. Note that items in a list are accessed in linear time. The index is zero-based, and is upper-bounded by the size of the list."
                     exported="1">
            <Datatype type="4"/>
            <Domain type="0">1;0;0;0</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Index" descr="Extracted generic output value">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Counter_1" catalog="base" class_id="Counter">
        <Parameters>
          <Parameter id="Step" name="Step" descr="Step Description" exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="Begin" name="Begin" descr="Begin Description" exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="End" name="End" descr="End Description" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="CustomReset" name="Custom reset value" descr="When the counter is reset, and the reset mode is set to custom value, this value is used."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="Start" name="Start" descr="Start Description" exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="Stop" name="Stop" descr="Stop Description" exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="Reset" name="Reset" descr="Reset Description" exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="ResetMode" name="Reset mode" descr="Specifies the behaviour when the counter is reset. The counter can reset to the initial value (Begin) or to a custom value."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Begin</Label>
              <Label>Custom value</Label>
            </Layout>
          </Parameter>
          <Parameter id="TypeCounter" name="Bounding mode" descr="Specifies whether the counter is bounded (stops counting after a given bound is reached), unbounded (counts forever) or circular (restart from the beginning after a given bound is reached)."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Unbounded counter;Bounded counter</Label>
              <Label>Circular counter</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="Output" name="Output" descr="Output Description">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input" name="Input" descr="Input Descrption">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetFilePathComponent_3" catalog="base" class_id="GetFilePathComponent">
        <Parameters>
          <Parameter id="ComponentType" name="Component type" descr="Used to set the type of component to be extracted"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;4</Domain>
            <Layout type="0">
              <Label>File Name or Folder Name</Label>
              <Label>Path</Label>
              <Label>File Stem (Filename Without Extension)</Label>
              <Label>File Extension</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="OutputComponent" name="File Name" descr="The extracted file name">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="InputPath" name="Input File Path" descr="The input file path">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Counter_6" catalog="base" class_id="Counter">
        <Parameters>
          <Parameter id="Step" name="Step" descr="Step Description" exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="Begin" name="Begin" descr="Begin Description" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="End" name="End" descr="End Description" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="CustomReset" name="Custom reset value" descr="When the counter is reset, and the reset mode is set to custom value, this value is used."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="Start" name="Start" descr="Start Description" exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="Stop" name="Stop" descr="Stop Description" exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="Reset" name="Reset" descr="Reset Description" exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="ResetMode" name="Reset mode" descr="Specifies the behaviour when the counter is reset. The counter can reset to the initial value (Begin) or to a custom value."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Begin</Label>
              <Label>Custom value</Label>
            </Layout>
          </Parameter>
          <Parameter id="TypeCounter" name="Bounding mode" descr="Specifies whether the counter is bounded (stops counting after a given bound is reached), unbounded (counts forever) or circular (restart from the beginning after a given bound is reached)."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Unbounded counter;Bounded counter</Label>
              <Label>Circular counter</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="Output" name="Output" descr="Output Description">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input" name="Input" descr="Input Descrption">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ContainerSize_1" catalog="base" class_id="container_size">
        <Parameters/>
        <Outputs>
          <Output id="output" name="Output" descr="Size of the input container">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This is the container which size will be estracted by the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="CompareWithValue - int_1" catalog="kernel" class_id="comparison_op_int">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Less Than (&lt;)</Label>
              <Label>Less Than or Equal To (&lt;=);Equal To (=);Different From (!= or &lt;&gt;)</Label>
              <Label>Greater Than (&gt;)</Label>
              <Label>Greater Than or Equal To (&gt;=)</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Value" descr="Value to compare with the input pin."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Result of comparison operation.">
            <Datatype type="1"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input before comparing datatype.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="BooleanToTrigger_1" catalog="base" class_id="bool_to_trigger">
        <Parameters>
          <Parameter id="mode" name="Mode" descr="Specifies when to generate the output trigger. "
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;5</Domain>
            <Layout type="0">
              <Label>False to true;True to false</Label>
              <Label>Any change</Label>
              <Label>True;False</Label>
            </Layout>
          </Parameter>
          <Parameter id="initial_state" name="Initial state" descr="This value is used only at first signal change detection to initialize the previous signal state."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Indeterminate;True</Label>
              <Label>False</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Output trigger datatype.">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input boolean datatype. The block generates a trigger as output according to the value of this datatype.">
            <Datatype type="1"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringDisplay_6" catalog="system" class_id="string_display">
        <Parameters>
          <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Near (left);Center</Label>
              <Label>Far (right)</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="string" name="Input string" descr="Input string to display.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringToInt_98" catalog="base" class_id="string_to_int">
        <Parameters/>
        <Outputs>
          <Output id="output" name="OutputInt" descr="The integer number">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="InputString" descr="The input string should contain only digits (optionally an initial sign) to be convertible to int.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="DisplayGDI-Interact_4" catalog="system" class_id="display_gdi">
        <Parameters>
          <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>ignore the presentation time</Label>
              <Label>respect the presentation time</Label>
            </Layout>
          </Parameter>
          <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;4</Domain>
            <Layout type="0">
              <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
              <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_image" name="Image" descr="Image to display.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="DisplayGDI-Interact_6" catalog="system" class_id="display_gdi">
        <Parameters>
          <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>ignore the presentation time</Label>
              <Label>respect the presentation time</Label>
            </Layout>
          </Parameter>
          <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;4</Domain>
            <Layout type="0">
              <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
              <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_image" name="Image" descr="Image to display.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringDisplay_8" catalog="system" class_id="string_display">
        <Parameters>
          <Parameter id="number_of_lines" name="Number of lines" descr="The number of lines which compose the document on which the text is written"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="number_of_columns" name="Number of columns" descr="The number of columns which compose the document on which the text is written"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="aligment" name="Horizontal alignment" descr="Background color (RGB model space)"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Near (left);Center</Label>
              <Label>Far (right)</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="string" name="Input string" descr="Input string to display.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="BangGenerator_2" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="TokenizeString_2" catalog="base" class_id="tokenize_string">
        <Parameters>
          <Parameter id="separator_string" name="Separator" descr="Character that separate InputString into substrings."
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="newline_as_separator" name="Is NewLine Separator" descr="Whether the newline character is included in the separators."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="tab_as_separator" name="Is Tab Separator" descr="Whether the tab character is included in the separators."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_string" name="InputString" descr="String that will be tokenized.">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="BangGenerator_3" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Delay_1" catalog="kernel" class_id="delay">
        <Parameters>
          <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Output datatype (delayed)">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_14" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_15" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="BangGenerator_4" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Switch_16" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ConstantGenerator - int_2" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="BangGenerator_8" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="WriteToFile_8" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_17" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_9" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_03" name="Input03" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_04" name="Input04" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_18" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_10" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_03" name="Input03" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_04" name="Input04" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_05" name="Input05" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_06" name="Input06" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_19" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_11" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_03" name="Input03" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_04" name="Input04" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_05" name="Input05" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_06" name="Input06" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_07" name="Input07" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_08" name="Input08" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_20" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_12" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_03" name="Input03" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_04" name="Input04" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_05" name="Input05" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_06" name="Input06" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_07" name="Input07" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_08" name="Input08" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_09" name="Input09" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_10" name="Input10" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_21" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_13" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_03" name="Input03" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_04" name="Input04" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_05" name="Input05" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_06" name="Input06" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_07" name="Input07" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_08" name="Input08" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_09" name="Input09" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_10" name="Input10" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_11" name="Input11" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_12" name="Input12" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_22" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="OpticalFlow_2" catalog="base" class_id="image_optical_flow">
        <Parameters>
          <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                     exported="1">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                     exported="1">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                     exported="1">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                     exported="1">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                     descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                     exported="1">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
            <Datatype type="6"/>
          </Output>
          <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_7" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_8" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_23" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
          <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="MovingArithmetic_1" catalog="kernel" class_id="moving_arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;6</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
            </Layout>
          </Parameter>
          <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;-1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="MovingArithmetic_2" catalog="kernel" class_id="moving_arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;6</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
            </Layout>
          </Parameter>
          <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;-1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Snapshot_2" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetPoint2DCoordinates_3" catalog="base" class_id="get_point2d_coordinates">
        <Parameters/>
        <Outputs>
          <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
          <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Snapshot_4" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Arithmetic_6" catalog="kernel" class_id="arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;7</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Arithmetic_9" catalog="kernel" class_id="arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;7</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="***TypeCast_4" catalog="base" class_id="ConversionLegacy">
        <Parameters/>
        <Outputs>
          <Output id="Output" name="Output" descr="Output">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input" name="Input" descr="Input">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="***TypeCast_5" catalog="base" class_id="ConversionLegacy">
        <Parameters/>
        <Outputs>
          <Output id="Output" name="Output" descr="Output">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input" name="Input" descr="Input">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Pixel CoM_1" catalog="base" class_id="image_baricenter">
        <Parameters/>
        <Outputs>
          <Output id="area" name="Area" descr="Area">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input_0" name="input" descr="input">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Snapshot_3" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="SetShapeStroke_1" catalog="base" class_id="set_stroke_properties_2d">
        <Parameters>
          <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="*OF1" catalog="base" class_id="DrawGraphicObject">
        <Parameters>
          <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>High quality</Label>
              <Label>Medium quality</Label>
              <Label>Low quality</Label>
            </Layout>
          </Parameter>
          <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                     descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
            <Datatype type="6"/>
          </Input>
          <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StartTracking" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ScalarArithmeticOperation - double_1" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarArithmeticOperation - double_8" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Image conversion_3" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Image conversion_4" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="OpticalFlow_3" catalog="base" class_id="image_optical_flow">
        <Parameters>
          <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                     exported="1">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                     exported="1">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                     exported="1">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                     exported="1">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                     descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                     exported="1">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
            <Datatype type="6"/>
          </Output>
          <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_9" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_10" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_24" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
          <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="MovingArithmetic_3" catalog="kernel" class_id="moving_arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;6</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
            </Layout>
          </Parameter>
          <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;-1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="MovingArithmetic_4" catalog="kernel" class_id="moving_arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;6</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
            </Layout>
          </Parameter>
          <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;-1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Snapshot_5" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetPoint2DCoordinates_2" catalog="base" class_id="get_point2d_coordinates">
        <Parameters/>
        <Outputs>
          <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
          <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Snapshot_6" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Arithmetic_2" catalog="kernel" class_id="arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;7</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Arithmetic_3" catalog="kernel" class_id="arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;7</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="***TypeCast_2" catalog="base" class_id="ConversionLegacy">
        <Parameters/>
        <Outputs>
          <Output id="Output" name="Output" descr="Output">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input" name="Input" descr="Input">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="***TypeCast_3" catalog="base" class_id="ConversionLegacy">
        <Parameters/>
        <Outputs>
          <Output id="Output" name="Output" descr="Output">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input" name="Input" descr="Input">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Pixel CoM_2" catalog="base" class_id="image_baricenter">
        <Parameters/>
        <Outputs>
          <Output id="area" name="Area" descr="Area">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input_0" name="input" descr="input">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Snapshot_7" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="SetShapeStroke_2" catalog="base" class_id="set_stroke_properties_2d">
        <Parameters>
          <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="*OF2" catalog="base" class_id="DrawGraphicObject">
        <Parameters>
          <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>High quality</Label>
              <Label>Medium quality</Label>
              <Label>Low quality</Label>
            </Layout>
          </Parameter>
          <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                     descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
            <Datatype type="6"/>
          </Input>
          <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="BangGenerator_18" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ScalarArithmeticOperation - double_9" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarArithmeticOperation - double_10" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Image conversion_2" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Image conversion_5" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="OpticalFlow_4" catalog="base" class_id="image_optical_flow">
        <Parameters>
          <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                     descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
            <Datatype type="6"/>
          </Output>
          <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_11" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_12" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_25" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
          <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="MovingArithmetic_5" catalog="kernel" class_id="moving_arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;6</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
            </Layout>
          </Parameter>
          <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;-1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="MovingArithmetic_6" catalog="kernel" class_id="moving_arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;6</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
            </Layout>
          </Parameter>
          <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;-1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Snapshot_8" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetPoint2DCoordinates_4" catalog="base" class_id="get_point2d_coordinates">
        <Parameters/>
        <Outputs>
          <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
          <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Snapshot_9" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Arithmetic_4" catalog="kernel" class_id="arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;7</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Arithmetic_5" catalog="kernel" class_id="arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;7</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="***TypeCast_6" catalog="base" class_id="ConversionLegacy">
        <Parameters/>
        <Outputs>
          <Output id="Output" name="Output" descr="Output">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input" name="Input" descr="Input">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="***TypeCast_7" catalog="base" class_id="ConversionLegacy">
        <Parameters/>
        <Outputs>
          <Output id="Output" name="Output" descr="Output">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input" name="Input" descr="Input">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Pixel CoM_3" catalog="base" class_id="image_baricenter">
        <Parameters/>
        <Outputs>
          <Output id="area" name="Area" descr="Area">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input_0" name="input" descr="input">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Snapshot_10" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="SetShapeStroke_3" catalog="base" class_id="set_stroke_properties_2d">
        <Parameters>
          <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="DrawGraphicObject_4" catalog="base" class_id="DrawGraphicObject">
        <Parameters>
          <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>High quality</Label>
              <Label>Medium quality</Label>
              <Label>Low quality</Label>
            </Layout>
          </Parameter>
          <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                     descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
            <Datatype type="6"/>
          </Input>
          <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="BangGenerator_19" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ScalarArithmeticOperation - double_11" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarArithmeticOperation - double_12" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Image conversion_6" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Image conversion_7" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="OpticalFlow_5" catalog="base" class_id="image_optical_flow">
        <Parameters>
          <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                     descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
            <Datatype type="6"/>
          </Output>
          <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_13" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_14" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_26" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
          <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="MovingArithmetic_7" catalog="kernel" class_id="moving_arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;6</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
            </Layout>
          </Parameter>
          <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;-1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="MovingArithmetic_8" catalog="kernel" class_id="moving_arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;6</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
            </Layout>
          </Parameter>
          <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;-1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Snapshot_11" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetPoint2DCoordinates_5" catalog="base" class_id="get_point2d_coordinates">
        <Parameters/>
        <Outputs>
          <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
          <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Snapshot_12" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Arithmetic_7" catalog="kernel" class_id="arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;7</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Arithmetic_8" catalog="kernel" class_id="arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;7</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="***TypeCast_8" catalog="base" class_id="ConversionLegacy">
        <Parameters/>
        <Outputs>
          <Output id="Output" name="Output" descr="Output">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input" name="Input" descr="Input">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="***TypeCast_9" catalog="base" class_id="ConversionLegacy">
        <Parameters/>
        <Outputs>
          <Output id="Output" name="Output" descr="Output">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input" name="Input" descr="Input">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Pixel CoM_4" catalog="base" class_id="image_baricenter">
        <Parameters/>
        <Outputs>
          <Output id="area" name="Area" descr="Area">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input_0" name="input" descr="input">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Snapshot_13" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="SetShapeStroke_4" catalog="base" class_id="set_stroke_properties_2d">
        <Parameters>
          <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="DrawGraphicObject_5" catalog="base" class_id="DrawGraphicObject">
        <Parameters>
          <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>High quality</Label>
              <Label>Medium quality</Label>
              <Label>Low quality</Label>
            </Layout>
          </Parameter>
          <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                     descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
            <Datatype type="6"/>
          </Input>
          <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="BangGenerator_20" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ScalarArithmeticOperation - double_13" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarArithmeticOperation - double_14" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Image conversion_8" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Image conversion_9" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="OpticalFlow_6" catalog="base" class_id="image_optical_flow">
        <Parameters>
          <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                     descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
            <Datatype type="6"/>
          </Output>
          <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_15" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_16" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_27" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
          <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="MovingArithmetic_9" catalog="kernel" class_id="moving_arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;6</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
            </Layout>
          </Parameter>
          <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;-1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="MovingArithmetic_10" catalog="kernel" class_id="moving_arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;6</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
            </Layout>
          </Parameter>
          <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;-1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Snapshot_14" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetPoint2DCoordinates_6" catalog="base" class_id="get_point2d_coordinates">
        <Parameters/>
        <Outputs>
          <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
          <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Snapshot_15" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Arithmetic_10" catalog="kernel" class_id="arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;7</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Arithmetic_11" catalog="kernel" class_id="arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;7</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="***TypeCast_10" catalog="base" class_id="ConversionLegacy">
        <Parameters/>
        <Outputs>
          <Output id="Output" name="Output" descr="Output">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input" name="Input" descr="Input">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="***TypeCast_11" catalog="base" class_id="ConversionLegacy">
        <Parameters/>
        <Outputs>
          <Output id="Output" name="Output" descr="Output">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input" name="Input" descr="Input">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Pixel CoM_5" catalog="base" class_id="image_baricenter">
        <Parameters/>
        <Outputs>
          <Output id="area" name="Area" descr="Area">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input_0" name="input" descr="input">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Snapshot_16" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="SetShapeStroke_5" catalog="base" class_id="set_stroke_properties_2d">
        <Parameters>
          <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="DrawGraphicObject_6" catalog="base" class_id="DrawGraphicObject">
        <Parameters>
          <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>High quality</Label>
              <Label>Medium quality</Label>
              <Label>Low quality</Label>
            </Layout>
          </Parameter>
          <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                     descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
            <Datatype type="6"/>
          </Input>
          <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="BangGenerator_21" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ScalarArithmeticOperation - double_15" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarArithmeticOperation - double_16" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Image conversion_10" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Image conversion_11" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="OpticalFlow_7" catalog="base" class_id="image_optical_flow">
        <Parameters>
          <Parameter id="levels" name="Pyramid layers" descr="number of pyramid layers including the initial image; levels=1 means that no extra layers are created and only the original images are used."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="win_size" name="[LK] Window Size" descr="averaging window size; larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield more blurred motion field."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="iterations_number" name="Iterations Number" descr="number of iterations the algorithm does at each pyramid level."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="polynomial_degreee" name="Pixel Neighborhood Size" descr="size of the pixel neighborhood used to find polynomial expansion in each pixel; larger values mean that the image will be approximated with smoother surfaces, yielding more robust algorithm and more blurred motion field, typically poly_n = 5 or 7."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;1;0;0</Domain>
          </Parameter>
          <Parameter id="polynomial_sigma" name="Pixel Neighborhood Standard Deviation"
                     descr="standard deviation of the Gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n=5, you can set poly_sigma = 1.1, for poly_n=7, a good value would be poly_sigma = 1.5."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;0;0</Domain>
          </Parameter>
          <Parameter id="pyramid_scaling" name="Pyramial Scaling Factor" descr="specifies the image scale(&lt;1) to build pyramids for each image; pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one."
                     exported="0">
            <Datatype type="5"/>
            <Domain type="1">1;0;1;1</Domain>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_video_stream_dx" name="Dx" descr="Output image with the horizontal component of the optical flow">
            <Datatype type="6"/>
          </Output>
          <Output id="output_video_stream_dy" name="Dy" descr="Output image with the vertical component of the optical flow">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream1" name="Input image" descr="Input multichannel image">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_17" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetImageStatistics_18" catalog="base" class_id="image_statistics">
        <Parameters>
          <Parameter id="index" name="Channel index" descr="Index of the channel on which to compute statistics."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;3</Domain>
          </Parameter>
          <Parameter id="compute_min" name="Min" descr="Compute min value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_max" name="Max" descr="Compute max value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_mean" name="Mean" descr="Compute mean value" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_stddev" name="Standard deviation" descr="Compute standard deviation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_sum" name="Sum" descr="Compute sum" exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_minidx" name="Index of Min" descr="Compute min value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="compute_maxidx" name="Index of Max" descr="Compute index of max value"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_min" name="Min" descr="Computed min value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_max" name="Max" descr="Computed max value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_mean" name="Mean" descr="Computed mean value">
            <Datatype type="5"/>
          </Output>
          <Output id="output_stddev" name="Standard deviation" descr="Computed standard deviation">
            <Datatype type="5"/>
          </Output>
          <Output id="output_sum" name="Sum" descr="Computed sum">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_video_stream" name="Input" descr="Input image on which to compute statistics. Although multichannel images are accepted, statistics will be computed on one channel only.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Point2DGenerator_28" catalog="base" class_id="point2d_generator">
        <Parameters>
          <Parameter id="x" name="X" descr="X value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="y" name="Y" descr="Y value" exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="trasform" name="Matrix trasform" descr="Matrix trasform"
                     exported="0">
            <Datatype type="8"/>
          </Parameter>
          <Parameter id="alfa_color" name="Alfa Color" descr="Specifies the colour of alpha channel if it's necessary. This parameter is enabled only if the domain is set to graphic mode"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="thickness" name="Thickness" descr="Specifies the thickness of geometric shape if the parameter domain is set to graphic value"
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="MovingArithmetic_11" catalog="kernel" class_id="moving_arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;6</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
            </Layout>
          </Parameter>
          <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;-1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="MovingArithmetic_12" catalog="kernel" class_id="moving_arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;1;6</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Subtract absolute</Label>
            </Layout>
          </Parameter>
          <Parameter id="length" name="Window length" descr="Length of the time window. -1 means infinite length."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;-1;0;0</Domain>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset the internal operand to its original value"
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="save" name="Save" descr="If true saves the current value in the patch file."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="queue_size" name="Queue size" descr="This output contains the actual queue size.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Snapshot_17" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetPoint2DCoordinates_7" catalog="base" class_id="get_point2d_coordinates">
        <Parameters/>
        <Outputs>
          <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
          <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Snapshot_18" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Arithmetic_12" catalog="kernel" class_id="arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;7</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Arithmetic_13" catalog="kernel" class_id="arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;7</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="***TypeCast_12" catalog="base" class_id="ConversionLegacy">
        <Parameters/>
        <Outputs>
          <Output id="Output" name="Output" descr="Output">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input" name="Input" descr="Input">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="***TypeCast_13" catalog="base" class_id="ConversionLegacy">
        <Parameters/>
        <Outputs>
          <Output id="Output" name="Output" descr="Output">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input" name="Input" descr="Input">
            <Datatype type="5"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Pixel CoM_6" catalog="base" class_id="image_baricenter">
        <Parameters/>
        <Outputs>
          <Output id="area" name="Area" descr="Area">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input_0" name="input" descr="input">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Snapshot_19" catalog="kernel" class_id="snapshot">
        <Parameters>
          <Parameter id="load" name="Load" descr="Load new value of datatype in the internal memory."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="reset" name="Reset" descr="Reset value of datatype in the internal memory"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Generate a new copy of snapshot datatype on every block activation"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Datatype stored in the internal memory and propagated to the output.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input stored in the internal memory.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="SetShapeStroke_6" catalog="base" class_id="set_stroke_properties_2d">
        <Parameters>
          <Parameter id="set_color" name="SetColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="set_alpha" name="SetAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="alpha" name="Alpha" descr="Specifies the alpha level of the graphical geometric datatype."
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="set_width" name="SetWidth" descr="Specifies whether to set the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="width" name="Width" descr="Specifies the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the stroke properties have been changed by this block.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="DrawGraphicObject_7" catalog="base" class_id="DrawGraphicObject">
        <Parameters>
          <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>High quality</Label>
              <Label>Medium quality</Label>
              <Label>Low quality</Label>
            </Layout>
          </Parameter>
          <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                     descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
            <Datatype type="6"/>
          </Input>
          <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="BangGenerator_22" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ScalarArithmeticOperation - double_17" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarArithmeticOperation - double_18" catalog="kernel"
             class_id="scalar_arith_op_double">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="1">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Image conversion_12" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Image conversion_13" catalog="base" class_id="image_converter">
        <Parameters>
          <Parameter id="letterbox_mode" name="LetterBox Mode" descr="Specifies where to place mattes and image when using letterboxing. in 'No letterbox' the aspectRatio is not preserved, and the source image is stretched or shrinked to cover all available space. In the other cases, the aspect ratio is (or might be) preserved, thus a black frame might be needed on the horizontal or vertical side to cover the unused space. This enumerator specifies where to place such black frame.&#10;Since the user might not know in advance whether letterboxing will place mattes above/below or left/right, each mode specifies how to behave in both cases. As an example, the letterbox mode left-middle means that if the image needs mattes on the sides, the image will be put to the extreme left, and the matte will span the right side; if the image needs mattes above/below, the image will be vertically centered. Hence, the mode is made of two terms, the first referring to the horizontal centering of the image, the second referring to the vertical centering. Horizontal centering may assume values none, left, center, or right. Vertical centering may assume values none, top, middle, or bottom. The term none means that if letterboxing is needed on that direction, than the image is stretched to fill the whole size. E.g., elmNoneTop means that is image is thinner than the destination rect, than no letterboxing is applied and the image is stretched horizontally. However, it the image is larger than the destination rect, than letterboxing is applied by putting the image on the top and a single matte below."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;16</Domain>
            <Layout type="0">
              <Label>No letterbox;CenterMiddle</Label>
              <Label>NoneTop</Label>
              <Label>NoneMiddle</Label>
              <Label>NoneBottom</Label>
              <Label>LeftNone</Label>
              <Label>LeftTop</Label>
              <Label>LeftMiddle</Label>
              <Label>LeftBottom</Label>
              <Label>CenterNone;CenterTop</Label>
              <Label>CenterBottom;RightNone;RightTop;RightMiddle;RightBottom</Label>
            </Layout>
          </Parameter>
          <Parameter id="preserve_roi" name="Preserve ROI" descr="Specifies whether a ROI is set on the output image, or not. If not, the output image has no ROI, if yes, the output ROI is set equalto the input ROI (or proportional to it in the case that the image size changes"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="interpolation" name="Interpolation" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., cubic) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Nearest Neighbor</Label>
              <Label>Linear;Cubic</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output image" descr="Converted image">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input image" descr="Input image which needs to be converted">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="DisplayGDI-Interact_10" catalog="system" class_id="display_gdi">
        <Parameters>
          <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>ignore the presentation time</Label>
              <Label>respect the presentation time</Label>
            </Layout>
          </Parameter>
          <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;4</Domain>
            <Layout type="0">
              <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
              <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_image" name="Image" descr="Image to display.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="DisplayGDI-Interact_11" catalog="system" class_id="display_gdi">
        <Parameters>
          <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>ignore the presentation time</Label>
              <Label>respect the presentation time</Label>
            </Layout>
          </Parameter>
          <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;4</Domain>
            <Layout type="0">
              <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
              <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_image" name="Image" descr="Image to display.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ConcatenateStrings_5" catalog="base" class_id="concatenate_strings">
        <Parameters/>
        <Outputs>
          <Output id="output" name="Output string" descr="The concatenation of the input strings">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
          <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
          <Input id="input_3" name="Input string 3" descr="The input string 3 wil be placed at position 3 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
          <Input id="input_4" name="Input string 4" descr="The input string 4 wil be placed at position 4 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
          <Input id="input_5" name="Input string 5" descr="The input string 5 wil be placed at position 5 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringGenerator_11" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*KCF1" catalog="base" class_id="DrawGraphicObject">
        <Parameters>
          <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>High quality</Label>
              <Label>Medium quality</Label>
              <Label>Low quality</Label>
            </Layout>
          </Parameter>
          <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                     descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
            <Datatype type="6"/>
          </Input>
          <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="*KCF2" catalog="base" class_id="DrawGraphicObject">
        <Parameters>
          <Parameter id="Quality" name="Quality" descr="Quality draw" exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>High quality</Label>
              <Label>Medium quality</Label>
              <Label>Low quality</Label>
            </Layout>
          </Parameter>
          <Parameter id="draw_unchanged_parameters" name="Draw Unchanged Datatypes"
                     descr="If set to true, each time the block is activated it draws all inputs, regardless of whether they are changed or not (this is the old behaviour). If false (default behaviour), only changed datatypes are drawn."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="Output" name="Output image" descr="The output image on which the graphic object has been drawn.">
            <Datatype type="6"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="InputImage" name="Input image" descr="The input image on which the graphic object will be drawn.">
            <Datatype type="6"/>
          </Input>
          <Input id="InputGraphicObject00" name="Input graphic object" descr="The graphic object to be drawn.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Shape2DInfo-int_1" catalog="base" class_id="extract_blob2d_info_int">
        <Parameters/>
        <Outputs>
          <Output id="area" name="Area" descr="Area of the input shape">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Shape" descr="Input shape">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetPoint2DCoordinates_1" catalog="base" class_id="get_point2d_coordinates">
        <Parameters/>
        <Outputs>
          <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
          <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Shape2DInfo-int_2" catalog="base" class_id="extract_blob2d_info_int">
        <Parameters/>
        <Outputs>
          <Output id="area" name="Area" descr="Area of the input shape">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Shape" descr="Input shape">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetPoint2DCoordinates_8" catalog="base" class_id="get_point2d_coordinates">
        <Parameters/>
        <Outputs>
          <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
          <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ScalarDisplay_11" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_20" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_21" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_24" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Shape2DInfo-int_3" catalog="base" class_id="extract_blob2d_info_int">
        <Parameters/>
        <Outputs>
          <Output id="area" name="Area" descr="Area of the input shape">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Shape" descr="Input shape">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetPoint2DCoordinates_9" catalog="base" class_id="get_point2d_coordinates">
        <Parameters/>
        <Outputs>
          <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
          <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Shape2DInfo-int_4" catalog="base" class_id="extract_blob2d_info_int">
        <Parameters/>
        <Outputs>
          <Output id="area" name="Area" descr="Area of the input shape">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Shape" descr="Input shape">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetPoint2DCoordinates_10" catalog="base" class_id="get_point2d_coordinates">
        <Parameters/>
        <Outputs>
          <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
          <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Shape2DInfo-int_5" catalog="base" class_id="extract_blob2d_info_int">
        <Parameters/>
        <Outputs>
          <Output id="area" name="Area" descr="Area of the input shape">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Shape" descr="Input shape">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetPoint2DCoordinates_11" catalog="base" class_id="get_point2d_coordinates">
        <Parameters/>
        <Outputs>
          <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
          <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Shape2DInfo-int_6" catalog="base" class_id="extract_blob2d_info_int">
        <Parameters/>
        <Outputs>
          <Output id="area" name="Area" descr="Area of the input shape">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Shape" descr="Input shape">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="GetPoint2DCoordinates_12" catalog="base" class_id="get_point2d_coordinates">
        <Parameters/>
        <Outputs>
          <Output id="output_x" name="Output X" descr="X coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
          <Output id="output_y" name="Output Y" descr="Y coordinate extracted from the input point">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ScalarDisplay_25" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_26" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_27" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_28" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_29" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_30" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_31" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarDisplay_32" catalog="base" class_id="Display">
        <Parameters>
          <Parameter id="DisplayNDD" name="Decimal digits" descr="If the input datatype is double it sets the number of decimal digits to be shown."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="Input000" name="Input 0" descr="Input 0 of the block">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_14" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_23" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_15" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_03" name="Input03" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_04" name="Input04" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_24" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_16" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_03" name="Input03" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_04" name="Input04" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_05" name="Input05" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_06" name="Input06" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_25" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_17" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_03" name="Input03" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_04" name="Input04" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_05" name="Input05" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_06" name="Input06" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_07" name="Input07" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_08" name="Input08" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_26" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_18" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_03" name="Input03" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_04" name="Input04" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_05" name="Input05" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_06" name="Input06" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_07" name="Input07" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_08" name="Input08" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_09" name="Input09" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_10" name="Input10" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_27" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="WriteToFile_19" catalog="base" class_id="WriteToFile">
        <Parameters>
          <Parameter id="file_name" name="FileName" descr="File Name" exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="file_mode" name="WritingMode" descr="Specifies if the file is overwited or appended every time the patch is started.&#10; append mode has been disabled because its behavior was broken&#10;"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Append</Label>
              <Label>Overwrite</Label>
            </Layout>
          </Parameter>
          <Parameter id="write_header" name="WriteHeader" descr="It specifies if the block writes or not the header line. IF THIS PARAMETER IS SET TO FALSE, THE OUTPUT FILE IS NOT READABLE  USING READFROMFILE BLOCK!"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_00" name="Input00" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_01" name="Input01" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_02" name="Input02" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_03" name="Input03" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_04" name="Input04" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_05" name="Input05" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_06" name="Input06" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_07" name="Input07" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_08" name="Input08" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_09" name="Input09" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_10" name="Input10" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_11" name="Input11" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_12" name="Input12" descr="Input 00.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_28" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ConcatenateStrings_6" catalog="base" class_id="concatenate_strings">
        <Parameters/>
        <Outputs>
          <Output id="output" name="Output string" descr="The concatenation of the input strings">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
          <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
          <Input id="input_3" name="Input string 3" descr="The input string 3 wil be placed at position 3 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
          <Input id="input_4" name="Input string 4" descr="The input string 4 wil be placed at position 4 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
          <Input id="input_5" name="Input string 5" descr="The input string 5 wil be placed at position 5 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringGenerator_12" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="DisplayGDI-Interact_12" catalog="system" class_id="display_gdi">
        <Parameters>
          <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>ignore the presentation time</Label>
              <Label>respect the presentation time</Label>
            </Layout>
          </Parameter>
          <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;4</Domain>
            <Layout type="0">
              <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
              <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_image" name="Image" descr="Image to display.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="DisplayGDI-Interact_13" catalog="system" class_id="display_gdi">
        <Parameters>
          <Parameter id="QueueAlgo" name="Presentation time" descr="To respect the image presentation time this display use a ordered queue. This parameter selects the algorithm used to manage the presentation time ('ignore', 'respect'). When 'ignore' is selected the input image is displayed immediately (bypassing the queue), otherwise the image is stored into the queue and is displayed when the clock time matches the presentation time."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>ignore the presentation time</Label>
              <Label>respect the presentation time</Label>
            </Layout>
          </Parameter>
          <Parameter id="QueueMaxSize" name="Queue max size" descr="This parameter set the maximum number of images stored into the internal queue."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="QueuePurge" name="Purge queue" descr="Drop all images contained into the internal queue."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="filtering" name="Interpolation Algorithm" descr="Specifies the algorithm used to interpolate the image when resize is needed.&#13;&#10;A rough interpolation (e.g., nearest neighbour) may cause visible artifacts, however, the CPU usage to perform such interpolation is quite limited. A good quality interpolation (e.g., lanczos) provides better results but may cause an high CPU load."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;4</Domain>
            <Layout type="0">
              <Label>nearest neighbour interpolation;linear interpolation;cubic convolution interpolation</Label>
              <Label>interpolation by 3-lobed Lanczos-windowed sinc function</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs>
          <Input id="input_image" name="Image" descr="Image to display.">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="BangGenerator_9" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="BangGenerator_10" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="BangGenerator_11" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Switch_29" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="0">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_30" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="0">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_31" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="0">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="BangGenerator_12" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Switch_32" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_33" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="BangGenerator_15" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Switch_40" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_39" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_41" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_42" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_49" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_50" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_51" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_52" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_53" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_54" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="OpenCV-Trackers_7" catalog="base" class_id="OpenCV-Trackers">
        <Parameters/>
        <Outputs/>
        <Inputs>
          <Input id="InputImage" name="Input Image" descr="input">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_36" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
          <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
          <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_44" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
          <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
          <Output id="out_2" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
          <Output id="out_3" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
          <Output id="out_4" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
          <Output id="out_5" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
          <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
          <Input id="in_2" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
          <Input id="in_3" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
          <Input id="in_4" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
          <Input id="in_5" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="OpenCV-Trackers_2" catalog="base" class_id="OpenCV-Trackers">
        <Parameters/>
        <Outputs/>
        <Inputs>
          <Input id="InputImage" name="Input Image" descr="input">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_34" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
          <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
          <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="OpenCV-Trackers_3" catalog="base" class_id="OpenCV-Trackers">
        <Parameters/>
        <Outputs/>
        <Inputs>
          <Input id="InputImage" name="Input Image" descr="input">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_35" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
          <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
          <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="OpenCV-Trackers_4" catalog="base" class_id="OpenCV-Trackers">
        <Parameters/>
        <Outputs/>
        <Inputs>
          <Input id="InputImage" name="Input Image" descr="input">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_37" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
          <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
          <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="OpenCV-Trackers_5" catalog="base" class_id="OpenCV-Trackers">
        <Parameters/>
        <Outputs/>
        <Inputs>
          <Input id="InputImage" name="Input Image" descr="input">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_38" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
          <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
          <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="OpenCV-Trackers_6" catalog="base" class_id="OpenCV-Trackers">
        <Parameters/>
        <Outputs/>
        <Inputs>
          <Input id="InputImage" name="Input Image" descr="input">
            <Datatype type="6"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Switch_43" catalog="kernel" class_id="switch">
        <Parameters>
          <Parameter id="condition" name="Status" descr="Specifies whether the channel is opened or closed, i.e., if inputs are propagated to the output or not."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Opened</Label>
              <Label>Closed</Label>
            </Layout>
          </Parameter>
          <Parameter id="toggle" name="Toggle status" descr="Switch the state of the block. If it's opened it close it, otherwise it open it."
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="open" name="Open" descr="Open the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="close" name="Close" descr="Close the switch." exported="1">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
          <Output id="out_1" name="Output" descr="It is generated only if condition is true.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
          <Input id="in_1" name="Input" descr="It is propagated to the output only if condition is true.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="FileStem" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="GetSpecialFolder_3" catalog="kernel" class_id="get_special_folder">
        <Parameters>
          <Parameter id="folder_type" name="Special Folder Type" descr="Specifies which type of folder to query.&#10; - KernelFolder: the folder where the EyesWeb kernel dll currently in use is located&#10; - PatchFolder: the folder where the currently running patch is located"
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>KernelFolder</Label>
              <Label>PatchFolder</Label>
            </Layout>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous Output" descr="Specifies if the block has to output the folder continuously or not.&#10;"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="folder" name="Folder" descr="The queried folder">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringGenerator_2" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringGenerator_6" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="_FeedBack" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="BangGenerator_13" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="_TrialActualNumber" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="_TrialTotalNumber" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="_fileFD" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="_fileOF" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="_fileKCF" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringGenerator_13" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConstantGenerator - int_3" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConstantGenerator - int_4" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConstantGenerator - int_5" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConstantGenerator - int_6" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="SetToNull" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringGenerator_25" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringGenerator_4" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringGenerator_5" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringGenerator_14" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="SpawnCommand_1" catalog="base" class_id="spawn_command">
        <Parameters>
          <Parameter id="allow_duplicates" name="Allow duplicates" descr="If set to true, dusplicates commands are executed. If set to false, only the first occurance is executed"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="handle_process" name="OutputHandle" descr="The handler of the process executed">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="command_string" name="InputCommand" descr="The command-line of the process to be executed">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringGenerator_22" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Close Gui" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="SetShapeFill_1" catalog="base" class_id="set_shape_properties_2d">
        <Parameters>
          <Parameter id="set_filled" name="SetFilled" descr="Specifies whether to set the filled property of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="filled" name="Filled" descr="Specifies whether the shape is filled or not."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="set_color" name="SetFillColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="set_alpha" name="SetFillAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="alpha" name="FillAlpha" descr="Specifies the alpha level of the graphical geometric datatype."
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the shape properties have been changed by this block.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="SetShapeFill_2" catalog="base" class_id="set_shape_properties_2d">
        <Parameters>
          <Parameter id="set_filled" name="SetFilled" descr="Specifies whether to set the filled property of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="filled" name="Filled" descr="Specifies whether the shape is filled or not."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="set_color" name="SetFillColor" descr="Specifies whether to set the color of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="set_alpha" name="SetFillAlpha" descr="Specifies whether to set the width of the graphical geometric datatype."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="alpha" name="FillAlpha" descr="Specifies the alpha level of the graphical geometric datatype."
                     exported="0">
            <Datatype type="5"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Graphical Object" descr="A bidimensional graphical object where the shape properties have been changed by this block.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input Graphical Object" descr="The input bidimensional graphical object of which to change the properties">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="BangGenerator_14" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Arithmetic_1" catalog="kernel" class_id="arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;7</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ConstantGenerator - int_7" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConstantGenerator - int_8" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Delay_2" catalog="kernel" class_id="delay">
        <Parameters>
          <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Output datatype (delayed)">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ScalarArithmeticOperation - int_4" catalog="kernel" class_id="scalar_arith_op_int">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;9</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Subtract inverse;Multiply;Divide;Divide inverse</Label>
              <Label>Max</Label>
              <Label>Min</Label>
              <Label>Set value</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Scalar value" descr="Specifies the scalar value involved in the operation."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="This input represent the operand involved in the operation with the scalar value.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ConstantGenerator - int_10" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConstantGenerator - int_11" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="BangGenerator_5" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConstantGenerator - int_12" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Arithmetic_14" catalog="kernel" class_id="arith_op">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatypes.&#10;The absolute subtraction operation subtracts the operand from the current datatype if the current. The result is always written to the current datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;7</Domain>
            <Layout type="0">
              <Label>Sum</Label>
              <Label>Subtract;Multiply;Divide;Max;Min;Absolute difference</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Block output. It contains the result of the specified operation.">
            <Datatype type="0"/>
          </Output>
          <Output id="chosen_input" name="Output index" descr="Index of the max/min value. Has not meaning for the other options.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input 1" descr="This input represent the 0th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
          <Input id="input_2" name="Input 2" descr="This input represent the 1th operand involved in the operation.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="*Comment" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="StringGenerator_8" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Size2DGenerator_1" catalog="base" class_id="point_2d_generator">
        <Parameters>
          <Parameter id="height" name="integer_height" descr="It specifies integer height value of size datatype."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="width" name="integer_width" descr="It specifies integer width value of size datatype."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="*MF1" catalog="kernel" class_id="int_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*alphaBackgroundParam" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*alphaForegroundParam" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*alphaBackgroundParam2" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*alphaForegroundParam2" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*LoadConfig" catalog="kernel" class_id="comparison_op_int">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Less Than (&lt;)</Label>
              <Label>Less Than or Equal To (&lt;=);Equal To (=);Different From (!= or &lt;&gt;)</Label>
              <Label>Greater Than (&gt;)</Label>
              <Label>Greater Than or Equal To (&gt;=)</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Value" descr="Value to compare with the input pin."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Result of comparison operation.">
            <Datatype type="1"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input before comparing datatype.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ConstantGenerator - int_13" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConstantGenerator - int_23" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConstantGenerator - int_24" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="BangGenerator_7" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Size2DGenerator_2" catalog="base" class_id="point_2d_generator">
        <Parameters>
          <Parameter id="height" name="integer_height" descr="It specifies integer height value of size datatype."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="width" name="integer_width" descr="It specifies integer width value of size datatype."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs/>
        <Inputs/>
      </Block>
      <Block label="*MF2" catalog="kernel" class_id="int_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConstantGenerator - int_9" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*LoadConfigVisible" catalog="kernel" class_id="comparison_op_int">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Less Than (&lt;)</Label>
              <Label>Less Than or Equal To (&lt;=);Equal To (=);Different From (!= or &lt;&gt;)</Label>
              <Label>Greater Than (&gt;)</Label>
              <Label>Greater Than or Equal To (&gt;=)</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Value" descr="Value to compare with the input pin."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Result of comparison operation.">
            <Datatype type="1"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input before comparing datatype.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ConstantGenerator - int_14" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConstantGenerator - int_15" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConstantGenerator - int_16" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="BangGenerator_16" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Restart" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Delay_3" catalog="kernel" class_id="delay">
        <Parameters>
          <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Output datatype (delayed)">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Delay_4" catalog="kernel" class_id="delay">
        <Parameters>
          <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Output datatype (delayed)">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="CompareWithString_1" catalog="base" class_id="compare_string">
        <Parameters>
          <Parameter id="compare_string" name="StringTemplate" descr="Template string for comparison. (use regular expression syntax in Perl syntax: http://www.boost.org/libs/regex/doc/syntax_perl.html#Perl). For example, .* pattern matches any number of characters, thus behaving similarly to the * pattern.So if you need to match objects with label starting with 'point' substring, you can write (point).* instead, if you need to match objects with label containing 'point' substring, you can write .*(point).* "
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output_comparison" name="CompareValue" descr="The output value is 1 if the strings match, 0 otherwise. ">
            <Datatype type="1"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_string" name="InputString" descr="String to compare">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="BooleanToTrigger_2" catalog="base" class_id="bool_to_trigger">
        <Parameters>
          <Parameter id="mode" name="Mode" descr="Specifies when to generate the output trigger. "
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;5</Domain>
            <Layout type="0">
              <Label>False to true;True to false</Label>
              <Label>Any change</Label>
              <Label>True;False</Label>
            </Layout>
          </Parameter>
          <Parameter id="initial_state" name="Initial state" descr="This value is used only at first signal change detection to initialize the previous signal state."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Indeterminate;True</Label>
              <Label>False</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Output trigger datatype.">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input boolean datatype. The block generates a trigger as output according to the value of this datatype.">
            <Datatype type="1"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="Counter_2" catalog="base" class_id="Counter">
        <Parameters>
          <Parameter id="Step" name="Step" descr="Step Description" exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="Begin" name="Begin" descr="Begin Description" exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="End" name="End" descr="End Description" exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="CustomReset" name="Custom reset value" descr="When the counter is reset, and the reset mode is set to custom value, this value is used."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="Start" name="Start" descr="Start Description" exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="Stop" name="Stop" descr="Stop Description" exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="Reset" name="Reset" descr="Reset Description" exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="ResetMode" name="Reset mode" descr="Specifies the behaviour when the counter is reset. The counter can reset to the initial value (Begin) or to a custom value."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;2</Domain>
            <Layout type="0">
              <Label>Begin</Label>
              <Label>Custom value</Label>
            </Layout>
          </Parameter>
          <Parameter id="TypeCounter" name="Bounding mode" descr="Specifies whether the counter is bounded (stops counting after a given bound is reached), unbounded (counts forever) or circular (restart from the beginning after a given bound is reached)."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;3</Domain>
            <Layout type="0">
              <Label>Unbounded counter;Bounded counter</Label>
              <Label>Circular counter</Label>
            </Layout>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="Output" name="Output" descr="Output Description">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="Input" name="Input" descr="Input Descrption">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="*StartIsPressed" catalog="kernel" class_id="comparison_op_int">
        <Parameters>
          <Parameter id="op_type" name="Operation type" descr="Select the type of operation that will be performed on the input datatype."
                     exported="0">
            <Datatype type="4"/>
            <Domain type="0">1;0;2;6</Domain>
            <Layout type="0">
              <Label>Less Than (&lt;)</Label>
              <Label>Less Than or Equal To (&lt;=);Equal To (=);Different From (!= or &lt;&gt;)</Label>
              <Label>Greater Than (&gt;)</Label>
              <Label>Greater Than or Equal To (&gt;=)</Label>
            </Layout>
          </Parameter>
          <Parameter id="scalar_value" name="Value" descr="Value to compare with the input pin."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Result of comparison operation.">
            <Datatype type="1"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input before comparing datatype.">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="ConstantGenerator - int_17" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConstantGenerator - int_18" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="1">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConstantGenerator - int_19" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="BangGenerator_17" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="DoubleGenerator_2" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="DoubleGenerator_3" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*OFPL1" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*OFPLK1" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*OFPL2" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*OFPLK2" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*OFITN1" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*OFITN2" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*FrameInitString" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="1">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="BangGenerator_23" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConstantGenerator - int_20" catalog="kernel" class_id="int_const_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Input value of the constant."
                     exported="0">
            <Datatype type="4"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output Value" descr="Output Value of the constant.">
            <Datatype type="4"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="Delay_5" catalog="kernel" class_id="delay">
        <Parameters>
          <Parameter id="reset" name="Reset" descr="Reset the status of the block by discarding the datatypes being stored. New datatypes will be processed normally (i.e.., will be delayed)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Output" descr="Output datatype (delayed)">
            <Datatype type="0"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input" name="Input" descr="Input datatype which will be delayed before being sent out. The block doesn't stop the execution of the patch during the time of delay. ">
            <Datatype type="0"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="*OFNHG2" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*OFNHG1" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*OFPSF1" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="*OFPSF2" catalog="kernel" class_id="double_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="Value" exported="0">
            <Datatype type="5"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="5"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="ConcatenateStrings_1" catalog="base" class_id="concatenate_strings">
        <Parameters/>
        <Outputs>
          <Output id="output" name="Output string" descr="The concatenation of the input strings">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs>
          <Input id="input_1" name="Input string 1" descr="The input string 1 wil be placed at position 1 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
          <Input id="input_2" name="Input string 2" descr="The input string 2 wil be placed at position 2 to build the output concatenated string">
            <Datatype type="3"/>
          </Input>
        </Inputs>
      </Block>
      <Block label="StringGenerator_9" catalog="kernel" class_id="string_generator">
        <Parameters>
          <Parameter id="value" name="Value" descr="The value of the string which is generated as the output of the block"
                     exported="0">
            <Datatype type="3"/>
          </Parameter>
          <Parameter id="continuous_output" name="Continuous output" descr="Specifies wether the output is always generated (true) or only when the value changes (false)"
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="output" name="Value" descr="Value">
            <Datatype type="3"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
      <Block label="BangGenerator_24" catalog="kernel" class_id="bang_generator">
        <Parameters>
          <Parameter id="bang" name="BangGenerator" descr="Bang generator (kernel catalog)"
                     exported="0">
            <Datatype type="2"/>
          </Parameter>
          <Parameter id="patch_start" name="Patch start" descr="Generates a bang when the patch starts."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_press" name="KeyPress" descr="Generates a bang when a key is pressed in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="key_release" name="KeyRelease" descr="Generates a bang when a key is released in the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_press" name="System KeyPress" descr="Generates a bang when a key is pressed even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="system-key_release" name="System KeyRelease" descr="Generates a bang when a key is released even outside the main EyesWeb application."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="periodic" name="Periodic" descr="Generates a bang periodically."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
          <Parameter id="absolute" name="Absolute time" descr="Generates a bang at a specified absolute time."
                     exported="0">
            <Datatype type="1"/>
          </Parameter>
        </Parameters>
        <Outputs>
          <Output id="bang" name="Bang" descr="Bang">
            <Datatype type="2"/>
          </Output>
        </Outputs>
        <Inputs/>
      </Block>
    </Blocks>
    <SubpatchParamPins/>
    <SubpatchOutputPins/>
    <SubpatchInputPins/>
  </PatchOutline>
</EywRADproject>
